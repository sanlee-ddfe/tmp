/*  This file is part of the OpenLB library
 *
 *  Copyright (C) 2021 Adrian Kummerlaender
 *  E-mail contact: info@openlb.net
 *  The most recent release of OpenLB can be downloaded at
 *  <http://www.openlb.net/>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
*/

#ifndef DYNAMICS_COLLISION_MRT_CSE_H
#define DYNAMICS_COLLISION_MRT_CSE_H


#ifndef DISABLE_CSE

#include "mrtLatticeDescriptors.h"

namespace olb {

namespace collision {

template <typename... FIELDS>
struct MRT::type<descriptors::D2Q5<FIELDS...>,momenta::BulkTuple,equilibria::SecondOrder> {

template <CONCEPT(MinimalCell) CELL, typename PARAMETERS, typename V=typename CELL::value_t>
CellStatistic<V> apply(CELL& cell, PARAMETERS& parameters) any_platform
{
auto x7 = parameters.template get<olb::descriptors::OMEGA>();
auto x5 = V{0.05}*cell[0] + V{0.05}*cell[1] + V{0.05}*cell[2] + V{0.05}*cell[3] + V{0.05}*cell[4] + V{0.05};
auto x6 = cell[0] + cell[1] + cell[2] + cell[3] + cell[4];
auto x8 = x6 + V{1};
auto x9 = V{1} / (x8);
auto x10 = x9*(V{3}*cell[1] - V{3}*cell[3]);
auto x11 = V{1} / ((x8)*(x8));
auto x12 = V{3}*x11;
auto x13 = cell[1] - cell[3];
auto x14 = x13*x13;
auto x15 = V{1.5}*x11;
auto x16 = cell[2] - cell[4];
auto x17 = x16*x16;
auto x18 = x15*x17;
auto x19 = x10 + x12*x14 - x18 + V{1};
auto x20 = x18 + V{-1};
auto x21 = -x10 + V{3}*x11*x14 - x20;
auto x22 = V{3}*cell[2] - V{3}*cell[4];
auto x23 = x22*x9;
auto x24 = x14*x15;
auto x25 = x12*x17;
auto x26 = x23 + x24 - x25 + V{-1};
auto x27 = -x26;
auto x28 = -x16;
auto x29 = x28*x28;
auto x30 = -x13;
auto x31 = x15*(x30*x30) + V{-1};
auto x32 = x6 + V{1};
auto x33 = -x12*x29 - x22*x9 + x31;
auto x34 = V{0.5}*x7;
auto x35 = V{0.166666666666667}*cell[0] + V{0.166666666666667}*cell[1] + V{0.166666666666667}*cell[2] + V{0.166666666666667}*cell[3] + V{0.166666666666667}*cell[4] + V{0.166666666666667};
auto x36 = x34*(-x19*x35 + x21*x35 + V{1}*cell[1] - V{1}*cell[3]);
auto x37 = V{0.075}*cell[0] + V{0.075}*cell[1] + V{0.075}*cell[2] + V{0.075}*cell[3] + V{0.075}*cell[4] + V{0.075};
auto x38 = V{0.05}*cell[0] + V{0.05}*cell[1] + V{0.05}*cell[2] + V{0.05}*cell[3] + V{0.05}*cell[4] + V{0.05};
auto x39 = -x23 + x24 - x25 + V{-1};
auto x40 = x20 + x24;
auto x41 = x40*(V{0.1}*cell[0] + V{0.1}*cell[1] + V{0.1}*cell[2] + V{0.1}*cell[3] + V{0.1}*cell[4] + V{0.1}) + V{0.3}*cell[0] + V{0.05};
auto x42 = x19*x37 + x21*x37 + x26*x38 + x38*x39 + x41 + V{0.3}*cell[2] + V{0.3}*cell[4];
auto x43 = x34*(x27*x35 + x33*x35 + V{1}*cell[2] - V{1}*cell[4]);
auto x44 = x26*x37;
auto x45 = x37*x39;
auto x46 = x19*x38;
auto x47 = x21*x38;
auto x0 = -x19*x5 - x21*x5 - x27*x5 + V{0.05}*x32*x33 - (x15*x29 + x31)*(V{0.4}*cell[0] + V{0.4}*cell[1] + V{0.4}*cell[2] + V{0.4}*cell[3] + V{0.4}*cell[4] + V{0.4}) - V{0.2}*cell[0] + V{0.3}*cell[1] + V{0.3}*cell[2] + V{0.3}*cell[3] + V{0.3}*cell[4] + V{-0.2};
auto x1 = -x36 + x42 + V{0.55}*cell[1] - V{0.45}*cell[3];
auto x2 = V{0.1}*x32*x40 - x43 - x44 - x45 - x46 - x47 + V{0.3}*cell[0] + V{0.3}*cell[1] + V{0.55}*cell[2] + V{0.3}*cell[3] - V{0.45}*cell[4] + V{0.05};
auto x3 = x36 + x42 - V{0.45}*cell[1] + V{0.55}*cell[3];
auto x4 = x41 + x43 - x44 - x45 - x46 - x47 + V{0.3}*cell[1] - V{0.45}*cell[2] + V{0.3}*cell[3] + V{0.55}*cell[4];
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
return { x8, V{1}*x11*(x14 + x17) };
}

};

template <typename... FIELDS>
struct MRT::type<descriptors::D2Q9<FIELDS...>,momenta::BulkTuple,equilibria::SecondOrder> {

template <CONCEPT(MinimalCell) CELL, typename PARAMETERS, typename V=typename CELL::value_t>
CellStatistic<V> apply(CELL& cell, PARAMETERS& parameters) any_platform
{
auto x11 = parameters.template get<olb::descriptors::OMEGA>();
auto x9 = V{0.00339506172839506}*cell[0] + V{0.00339506172839506}*cell[1] + V{0.00339506172839506}*cell[2] + V{0.00339506172839506}*cell[3] + V{0.00339506172839506}*cell[4] + V{0.00339506172839506}*cell[5] + V{0.00339506172839506}*cell[6] + V{0.00339506172839506}*cell[7] + V{0.00339506172839506}*cell[8] + V{0.00339506172839506};
auto x10 = cell[0] + cell[1] + cell[2] + cell[3] + cell[4] + cell[5] + cell[6] + cell[7] + cell[8];
auto x12 = x10 + V{1};
auto x13 = V{1} / (x12);
auto x14 = V{3}*cell[7];
auto x15 = V{3}*cell[3];
auto x16 = V{3}*cell[1] - V{3}*cell[5];
auto x17 = x13*(x14 - x15 + x16 - V{3}*cell[4] + V{3}*cell[8]);
auto x18 = V{1} / ((x12)*(x12));
auto x19 = V{4.5}*x18;
auto x20 = -cell[4] + cell[8];
auto x21 = cell[2] - cell[6];
auto x22 = x20 + x21 + V{2}*cell[1] - V{2}*cell[5];
auto x23 = x19*(x22*x22);
auto x24 = -x23;
auto x25 = -x14 + x15 + x16 + V{3}*cell[2] - V{3}*cell[6];
auto x26 = x13*x25;
auto x27 = V{1.5}*x18;
auto x28 = cell[1] - cell[5];
auto x29 = x21 + x28 + cell[3] - cell[7];
auto x30 = x29*x29;
auto x31 = x27*x30;
auto x32 = x20 + x28 - cell[3] + cell[7];
auto x33 = x32*x32;
auto x34 = x27*x33;
auto x35 = x34 + V{-1};
auto x36 = x31 + x35;
auto x37 = x26 + x36;
auto x38 = x17 + x24 + x37;
auto x39 = -x31;
auto x40 = -x17;
auto x41 = x21 + V{2}*cell[3] + cell[4] - V{2}*cell[7] - cell[8];
auto x42 = -x41;
auto x43 = x19*(x42*x42);
auto x44 = V{1} - x34;
auto x45 = x26 + x44;
auto x46 = -x39 - x40 - x43 - x45;
auto x47 = V{0.0135802469135802}*cell[0] + V{0.0135802469135802}*cell[1] + V{0.0135802469135802}*cell[2] + V{0.0135802469135802}*cell[3] + V{0.0135802469135802}*cell[4] + V{0.0135802469135802}*cell[5] + V{0.0135802469135802}*cell[6] + V{0.0135802469135802}*cell[7] + V{0.0135802469135802}*cell[8] + V{0.0135802469135802};
auto x48 = V{3}*x18;
auto x49 = x33*x48;
auto x50 = x17 - x49 + V{-1};
auto x51 = x31 + x50;
auto x52 = x17 + x39;
auto x53 = x45 + x52;
auto x54 = x23 + x53;
auto x55 = x37 + x40;
auto x56 = V{4.5}*x18*(x41*x41) - x55;
auto x57 = x30*x48 + x45;
auto x58 = x49 + x52 + V{1};
auto x59 = V{3}*x18*x30 - x26 - x35;
auto x60 = V{0.0611111111111111}*cell[4];
auto x61 = V{0.0611111111111111}*cell[6];
auto x62 = V{0.152777777777778}*cell[3];
auto x63 = V{0.152777777777778}*cell[7];
auto x64 = V{0.25}*x11;
auto x65 = V{1}*cell[3];
auto x66 = V{1}*cell[7];
auto x67 = V{0.0277777777777778}*cell[0] + V{0.0277777777777778}*cell[1] + V{0.0277777777777778}*cell[2] + V{0.0277777777777778}*cell[3] + V{0.0277777777777778}*cell[4] + V{0.0277777777777778}*cell[5] + V{0.0277777777777778}*cell[6] + V{0.0277777777777778}*cell[7] + V{0.0277777777777778}*cell[8] + V{0.0277777777777778};
auto x68 = -x13*x25;
auto x69 = x17 + x68;
auto x70 = -x29;
auto x71 = x27*(x70*x70);
auto x72 = x44 - x71;
auto x73 = -x43;
auto x74 = x35 + x71;
auto x75 = x69 + x73 + x74;
auto x76 = x40 + x68;
auto x77 = -x22;
auto x78 = x19*(x77*x77);
auto x79 = V{0.00424382716049383}*cell[0] + V{0.00424382716049383}*cell[1] + V{0.00424382716049383}*cell[2] + V{0.00424382716049383}*cell[3] + V{0.00424382716049383}*cell[4] + V{0.00424382716049383}*cell[5] + V{0.00424382716049383}*cell[6] + V{0.00424382716049383}*cell[7] + V{0.00424382716049383}*cell[8] + V{0.00424382716049383};
auto x80 = V{0.0339506172839506}*cell[0] + V{0.0339506172839506}*cell[1] + V{0.0339506172839506}*cell[2] + V{0.0339506172839506}*cell[3] + V{0.0339506172839506}*cell[4] + V{0.0339506172839506}*cell[5] + V{0.0339506172839506}*cell[6] + V{0.0339506172839506}*cell[7] + V{0.0339506172839506}*cell[8] + V{0.0339506172839506};
auto x81 = x57*x80;
auto x82 = x58*x80;
auto x83 = V{0.000848765432098765}*cell[0] + V{0.000848765432098765}*cell[1] + V{0.000848765432098765}*cell[2] + V{0.000848765432098765}*cell[3] + V{0.000848765432098765}*cell[4] + V{0.000848765432098765}*cell[5] + V{0.000848765432098765}*cell[6] + V{0.000848765432098765}*cell[7] + V{0.000848765432098765}*cell[8] + V{0.000848765432098765};
auto x84 = -x38;
auto x85 = V{0.00679012345679012}*cell[0] + V{0.00679012345679012}*cell[1] + V{0.00679012345679012}*cell[2] + V{0.00679012345679012}*cell[3] + V{0.00679012345679012}*cell[4] + V{0.00679012345679012}*cell[5] + V{0.00679012345679012}*cell[6] + V{0.00679012345679012}*cell[7] + V{0.00679012345679012}*cell[8] + V{0.00679012345679012};
auto x86 = x50 + x71;
auto x87 = x10 + V{1};
auto x88 = -x55 - x73;
auto x89 = x53 + x78;
auto x90 = -V{0.122222222222222}*cell[0];
auto x91 = -V{0.054320987654321}*x74*x87 + x90;
auto x92 = V{0.0611111111111111}*cell[5];
auto x93 = V{0.152777777777778}*cell[4];
auto x94 = V{0.152777777777778}*cell[8];
auto x95 = V{0.00848765432098765}*cell[0] + V{0.00848765432098765}*cell[1] + V{0.00848765432098765}*cell[2] + V{0.00848765432098765}*cell[3] + V{0.00848765432098765}*cell[4] + V{0.00848765432098765}*cell[5] + V{0.00848765432098765}*cell[6] + V{0.00848765432098765}*cell[7] + V{0.00848765432098765}*cell[8] + V{0.00848765432098765};
auto x96 = V{0.0169753086419753}*cell[0] + V{0.0169753086419753}*cell[1] + V{0.0169753086419753}*cell[2] + V{0.0169753086419753}*cell[3] + V{0.0169753086419753}*cell[4] + V{0.0169753086419753}*cell[5] + V{0.0169753086419753}*cell[6] + V{0.0169753086419753}*cell[7] + V{0.0169753086419753}*cell[8] + V{0.0169753086419753};
auto x97 = V{0.00169753086419753}*cell[0] + V{0.00169753086419753}*cell[1] + V{0.00169753086419753}*cell[2] + V{0.00169753086419753}*cell[3] + V{0.00169753086419753}*cell[4] + V{0.00169753086419753}*cell[5] + V{0.00169753086419753}*cell[6] + V{0.00169753086419753}*cell[7] + V{0.00169753086419753}*cell[8] + V{0.00169753086419753};
auto x98 = V{0.054320987654321}*cell[0] + V{0.054320987654321}*cell[1] + V{0.054320987654321}*cell[2] + V{0.054320987654321}*cell[3] + V{0.054320987654321}*cell[4] + V{0.054320987654321}*cell[5] + V{0.054320987654321}*cell[6] + V{0.054320987654321}*cell[7] + V{0.054320987654321}*cell[8] + V{0.054320987654321};
auto x99 = V{0.0577160493827161}*cell[0] + V{0.0577160493827161}*cell[1] + V{0.0577160493827161}*cell[2] + V{0.0577160493827161}*cell[3] + V{0.0577160493827161}*cell[4] + V{0.0577160493827161}*cell[5] + V{0.0577160493827161}*cell[6] + V{0.0577160493827161}*cell[7] + V{0.0577160493827161}*cell[8] + V{0.0577160493827161};
auto x100 = V{0.111111111111111}*cell[0] + V{0.111111111111111}*cell[1] + V{0.111111111111111}*cell[2] + V{0.111111111111111}*cell[3] + V{0.111111111111111}*cell[4] + V{0.111111111111111}*cell[5] + V{0.111111111111111}*cell[6] + V{0.111111111111111}*cell[7] + V{0.111111111111111}*cell[8] + V{0.111111111111111};
auto x101 = x100*x57 + x100*x59 + x100*x86 - V{0.111111111111111}*x58*x87 - V{1}*cell[2] + V{1}*cell[4] - V{1}*cell[6] + V{1}*cell[8];
auto x102 = -x101*x64;
auto x103 = x86*x96;
auto x104 = V{0.0237654320987654}*cell[0] + V{0.0237654320987654}*cell[1] + V{0.0237654320987654}*cell[2] + V{0.0237654320987654}*cell[3] + V{0.0237654320987654}*cell[4] + V{0.0237654320987654}*cell[5] + V{0.0237654320987654}*cell[6] + V{0.0237654320987654}*cell[7] + V{0.0237654320987654}*cell[8] + V{0.0237654320987654};
auto x105 = V{0.122222222222222}*cell[0];
auto x106 = x105 + V{0.305555555555556}*cell[3] - V{0.0611111111111111}*cell[7];
auto x107 = V{0.00933641975308642}*cell[0] + V{0.00933641975308642}*cell[1] + V{0.00933641975308642}*cell[2] + V{0.00933641975308642}*cell[3] + V{0.00933641975308642}*cell[4] + V{0.00933641975308642}*cell[5] + V{0.00933641975308642}*cell[6] + V{0.00933641975308642}*cell[7] + V{0.00933641975308642}*cell[8] + V{0.00933641975308642};
auto x108 = x36*x98;
auto x109 = x105 + x108 + x51*x80 + x58*x85 + V{0.305555555555556}*cell[4] - V{0.0611111111111111}*cell[8] + V{0.0916666666666667};
auto x110 = x64*(-x65 - x66 - x67*x75 - x67*x84 - x67*x89 + V{0.0277777777777778}*x87*x88 + V{1}*cell[1] + V{1}*cell[5]);
auto x111 = x110 - x38*x79 + x54*x79 - V{0.152777777777778}*cell[1] - V{0.152777777777778}*cell[5];
auto x112 = V{0.0611111111111111}*cell[1];
auto x113 = V{0.152777777777778}*cell[2];
auto x114 = V{0.152777777777778}*cell[6];
auto x115 = x101*x64;
auto x116 = x57*x85 - x59*x80 - V{0.0611111111111111}*cell[2] + V{0.305555555555556}*cell[6];
auto x117 = V{0.0611111111111111}*cell[3] - V{0.305555555555556}*cell[7];
auto x0 = -x36*(V{0.434567901234568}*cell[0] + V{0.434567901234568}*cell[1] + V{0.434567901234568}*cell[2] + V{0.434567901234568}*cell[3] + V{0.434567901234568}*cell[4] + V{0.434567901234568}*cell[5] + V{0.434567901234568}*cell[6] + V{0.434567901234568}*cell[7] + V{0.434567901234568}*cell[8] + V{0.434567901234568}) + x38*x9 + x46*x9 + x47*x51 - x47*x57 - x47*x58 - x47*x59 - x54*x9 - x56*x9 + V{0.0222222222222221}*cell[0] + V{0.122222222222222}*cell[1] + V{0.122222222222222}*cell[2] + V{0.122222222222222}*cell[3] + V{0.122222222222222}*cell[4] + V{0.122222222222222}*cell[5] + V{0.122222222222222}*cell[6] + V{0.122222222222222}*cell[7] + V{0.122222222222222}*cell[8] + V{-0.366666666666667};
auto x1 = V{0.00679012345679012}*x59*x87 - x60 - x61 - x62 - x63 - x64*(-x65 - x66 - x67*x75 - x67*(-x24 - x74 - x76) + x67*(x43 + x69 + x72) - x67*(x72 + x76 + x78) + V{1}*cell[1] + V{1}*cell[5]) - x75*x79 - x81 - x82 - x83*x84 - x85*x86 + V{0.00424382716049383}*x87*x88 + V{0.00933641975308642}*x87*x89 - x91 + V{0.663888888888889}*cell[1] + V{0.305555555555556}*cell[2] + V{0.0305555555555556}*cell[5] + V{0.305555555555556}*cell[8] + V{0.0916666666666667};
auto x2 = -x102 - x103 - x104*x59 + x106 + x57*x99 + x58*x96 + x74*x98 + x75*x95 + x84*x97 + x88*x97 - x89*x95 - x92 - x93 - x94 + V{0.305555555555556}*cell[1] + V{0.480555555555556}*cell[2] + V{0.213888888888889}*cell[6] + V{-4.60279962292513e-17};
auto x3 = -x107*x46 + x109 + x111 - x56*x83 + x59*x85 - x61 - x81 + V{0.305555555555556}*cell[2] + V{0.663888888888889}*cell[3] + V{0.0305555555555556}*cell[7];
auto x4 = -x104*x58 + x106 + x108 - x112 - x113 - x114 - x115 + x38*x95 + x46*x95 - x51*x99 + x54*x97 + x56*x97 + x57*x96 + x59*x96 + V{0.480555555555556}*cell[4] + V{0.305555555555556}*cell[5] + V{0.213888888888889}*cell[8] + V{-4.85722573273506e-17};
auto x5 = -x107*x38 + x109 - x110 + x116 - x46*x79 - x54*x83 + x56*x79 - x62 - x63 + V{0.0305555555555556}*cell[1] + V{0.663888888888889}*cell[5];
auto x6 = -x102 - x103 - x104*x57 - x112 - x117 + V{0.0169753086419753}*x58*x87 + V{0.0577160493827161}*x59*x87 - x75*x97 - x84*x95 + V{0.00169753086419753}*x87*x89 - x88*x95 - x91 - x93 - x94 + V{0.213888888888889}*cell[2] + V{0.305555555555556}*cell[5] + V{0.480555555555556}*cell[6] + V{-5.11165184254499e-17};
auto x7 = x105 + x107*x56 + x108 + x111 + x116 + x46*x83 - x51*x85 - x60 - x82 + V{0.0305555555555556}*cell[3] + V{0.663888888888889}*cell[7] + V{0.305555555555556}*cell[8] + V{0.0916666666666667};
auto x8 = -x113 - x114 - x115 - x117 + V{0.054320987654321}*x36*x87 - x38*x97 - x46*x97 + V{0.0237654320987654}*x51*x87 - x54*x95 - x56*x95 + V{0.0169753086419753}*x57*x87 + V{0.0577160493827161}*x58*x87 + V{0.0169753086419753}*x59*x87 - x90 - x92 + V{0.305555555555556}*cell[1] + V{0.213888888888889}*cell[4] + V{0.480555555555556}*cell[8] + V{-4.85722573273506e-17};
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
return { x12, V{1}*x18*(x30 + x33) };
}

};

template <typename... FIELDS>
struct MRT::type<descriptors::D3Q7<FIELDS...>,momenta::BulkTuple,equilibria::SecondOrder> {

template <CONCEPT(MinimalCell) CELL, typename PARAMETERS, typename V=typename CELL::value_t>
CellStatistic<V> apply(CELL& cell, PARAMETERS& parameters) any_platform
{
auto x10 = parameters.template get<olb::descriptors::OMEGA>();
auto x7 = V{0.0339285714285714}*cell[0] + V{0.0339285714285714}*cell[1] + V{0.0339285714285714}*cell[2] + V{0.0339285714285714}*cell[3] + V{0.0339285714285714}*cell[4] + V{0.0339285714285714}*cell[5] + V{0.0339285714285714}*cell[6] + V{0.0339285714285714};
auto x8 = cell[0] + cell[1] + cell[2] + cell[3] + cell[4] + cell[5] + cell[6] + V{1};
auto x9 = V{1} / (x8);
auto x11 = V{4}*cell[1] - V{4}*cell[4];
auto x12 = V{1} / ((x8)*(x8));
auto x13 = V{6}*x12;
auto x14 = cell[1] - cell[4];
auto x15 = -x14;
auto x16 = x15*x15;
auto x17 = V{2}*x12;
auto x18 = cell[2] - cell[5];
auto x19 = -x18;
auto x20 = x19*x19;
auto x21 = x17*x20;
auto x22 = cell[3] - cell[6];
auto x23 = -x22;
auto x24 = x23*x23;
auto x25 = x17*x24;
auto x26 = x21 + x25 + V{-1};
auto x27 = -x11*x9 - x13*x16 + x26;
auto x28 = V{4}*cell[2] - V{4}*cell[5];
auto x29 = x16*x17;
auto x30 = x29 + V{-1};
auto x31 = -x13*x20 + x25 - x28*x9 + x30;
auto x32 = V{4}*cell[3] - V{4}*cell[6];
auto x33 = -x13*x24 + x21 + x30 - x32*x9;
auto x34 = x11*x9;
auto x35 = x14*x14;
auto x36 = x13*x35;
auto x37 = x18*x18;
auto x38 = x17*x37;
auto x39 = x22*x22;
auto x40 = x17*x39;
auto x41 = x38 + x40 + V{-1};
auto x42 = x34 - x36 + x41;
auto x43 = -x42;
auto x44 = x28*x9;
auto x45 = x13*x37;
auto x46 = x17*x35;
auto x47 = x46 + V{-1};
auto x48 = x40 + x44 - x45 + x47;
auto x49 = -x48;
auto x50 = x32*x9;
auto x51 = x13*x39;
auto x52 = x38 + x47 + x50 - x51;
auto x53 = -x52;
auto x54 = V{0.271428571428571}*cell[2];
auto x55 = V{0.271428571428571}*cell[3];
auto x56 = V{0.271428571428571}*cell[5];
auto x57 = V{0.271428571428571}*cell[6];
auto x58 = x54 + x55 + x56 + x57;
auto x59 = V{0.271428571428571}*cell[1] + V{0.271428571428571}*cell[4];
auto x60 = V{0.5}*x10;
auto x61 = V{0.125}*cell[0] + V{0.125}*cell[1] + V{0.125}*cell[2] + V{0.125}*cell[3] + V{0.125}*cell[4] + V{0.125}*cell[5] + V{0.125}*cell[6] + V{0.125};
auto x62 = x60*(x27*x61 + x43*x61 + V{1}*cell[1] - V{1}*cell[4]);
auto x63 = V{0.0848214285714286}*cell[0] + V{0.0848214285714286}*cell[1] + V{0.0848214285714286}*cell[2] + V{0.0848214285714286}*cell[3] + V{0.0848214285714286}*cell[4] + V{0.0848214285714286}*cell[5] + V{0.0848214285714286}*cell[6] + V{0.0848214285714286};
auto x64 = -x38;
auto x65 = -x40;
auto x66 = -x34 - x36 - x64 - x65 + V{-1};
auto x67 = V{0.271428571428571}*cell[0];
auto x68 = (x41 + x46)*(V{0.0678571428571428}*cell[0] + V{0.0678571428571428}*cell[1] + V{0.0678571428571428}*cell[2] + V{0.0678571428571428}*cell[3] + V{0.0678571428571428}*cell[4] + V{0.0678571428571428}*cell[5] + V{0.0678571428571428}*cell[6] + V{0.0678571428571428});
auto x69 = V{1} - x46;
auto x70 = -x50 - x51 - x64 - x69;
auto x71 = x52*x7 + x67 + x68 + x7*x70 + V{0.0339285714285714};
auto x72 = -x44 - x45 - x65 - x69;
auto x73 = x48*x7 + x7*x72;
auto x74 = -x42*x63 + x58 - x63*x66 + x71 + x73;
auto x75 = x60*(x31*x61 + x49*x61 + V{1}*cell[2] - V{1}*cell[5]);
auto x76 = V{0.0848214285714286}*cell[0] + V{0.0848214285714286}*cell[1] + V{0.0848214285714286}*cell[2] + V{0.0848214285714286}*cell[3] + V{0.0848214285714286}*cell[4] + V{0.0848214285714286}*cell[5] + V{0.0848214285714286}*cell[6] + V{0.0848214285714286};
auto x77 = x42*x7 + x59 + x66*x7;
auto x78 = -x48*x76 + x55 + x57 + x71 - x72*x76 + x77;
auto x79 = x60*(x33*x61 + x53*x61 + V{1}*cell[3] - V{1}*cell[6]);
auto x80 = -x52*x76 + x54 + x56 + x67 + x68 - x70*x76 + x73 + x77 + V{0.0339285714285714};
auto x0 = x27*x7 + x31*x7 + x33*x7 - x43*x7 - x49*x7 - x53*x7 + x58 + x59 - (x26 + x29)*(V{0.407142857142857}*cell[0] + V{0.407142857142857}*cell[1] + V{0.407142857142857}*cell[2] + V{0.407142857142857}*cell[3] + V{0.407142857142857}*cell[4] + V{0.407142857142857}*cell[5] + V{0.407142857142857}*cell[6] + V{0.407142857142857}) - V{0.628571428571429}*cell[0] + V{-0.203571428571429};
auto x1 = -x62 + x74 + V{0.321428571428572}*cell[1] - V{0.678571428571428}*cell[4];
auto x2 = -x75 + x78 + V{0.321428571428571}*cell[2] - V{0.678571428571429}*cell[5];
auto x3 = -x79 + x80 + V{0.321428571428571}*cell[3] - V{0.678571428571429}*cell[6];
auto x4 = x62 + x74 - V{0.678571428571428}*cell[1] + V{0.321428571428572}*cell[4];
auto x5 = x75 + x78 - V{0.678571428571429}*cell[2] + V{0.321428571428571}*cell[5];
auto x6 = x79 + x80 - V{0.678571428571429}*cell[3] + V{0.321428571428571}*cell[6];
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
return { x8, V{1}*x12*(x35 + x37 + x39) };
}

};

template <typename... FIELDS>
struct MRT::type<descriptors::D3Q19<FIELDS...>,momenta::BulkTuple,equilibria::SecondOrder> {

template <CONCEPT(MinimalCell) CELL, typename PARAMETERS, typename V=typename CELL::value_t>
CellStatistic<V> apply(CELL& cell, PARAMETERS& parameters) any_platform
{
auto x22 = parameters.template get<olb::descriptors::OMEGA>();
auto x19 = V{0.00146198830409357}*cell[0] + V{0.00146198830409357}*cell[10] + V{0.00146198830409357}*cell[11] + V{0.00146198830409357}*cell[12] + V{0.00146198830409357}*cell[13] + V{0.00146198830409357}*cell[14] + V{0.00146198830409357}*cell[15] + V{0.00146198830409357}*cell[16] + V{0.00146198830409357}*cell[17] + V{0.00146198830409357}*cell[18] + V{0.00146198830409357}*cell[1] + V{0.00146198830409357}*cell[2] + V{0.00146198830409357}*cell[3] + V{0.00146198830409357}*cell[4] + V{0.00146198830409357}*cell[5] + V{0.00146198830409357}*cell[6] + V{0.00146198830409357}*cell[7] + V{0.00146198830409357}*cell[8] + V{0.00146198830409357}*cell[9] + V{0.00146198830409357};
auto x20 = cell[10] + cell[14];
auto x21 = cell[12] + cell[7];
auto x23 = cell[3] + cell[6];
auto x24 = x20 + x21 + x23 + cell[0] + cell[11] + cell[13] + cell[15] + cell[16] + cell[17] + cell[18] + cell[1] + cell[2] + cell[4] + cell[5] + cell[8] + cell[9] + V{1};
auto x25 = V{1} / (x24);
auto x26 = V{3}*cell[7];
auto x27 = V{3}*cell[9];
auto x28 = V{3}*cell[16];
auto x29 = V{3}*cell[18];
auto x30 = V{3}*cell[17] - V{3}*cell[8];
auto x31 = V{3}*cell[15] - V{3}*cell[6];
auto x32 = x25*(x26 + x27 - x28 - x29 + x30 + x31 + V{3}*cell[12] - V{3}*cell[3]);
auto x33 = V{1} / ((x24)*(x24));
auto x34 = V{4.5}*x33;
auto x35 = cell[13] - cell[4];
auto x36 = cell[15] - cell[6];
auto x37 = x35 + x36;
auto x38 = -cell[2];
auto x39 = x38 + cell[11] - cell[14] + cell[5];
auto x40 = -cell[3];
auto x41 = x21 + x40 - cell[16];
auto x42 = x37 + x39 + x41 + V{2}*cell[17] - V{2}*cell[8];
auto x43 = x34*(x42*x42);
auto x44 = V{3}*cell[5];
auto x45 = V{3}*cell[14];
auto x46 = V{3}*cell[13] - V{3}*cell[4];
auto x47 = x25*(-x27 + x29 + x30 + x44 - x45 + x46 + V{3}*cell[11] - V{3}*cell[2]);
auto x48 = V{1.5}*x33;
auto x49 = cell[17] - cell[8];
auto x50 = x35 + x49;
auto x51 = cell[18] - cell[9];
auto x52 = x39 + x50 + x51;
auto x53 = x52*x52;
auto x54 = x48*x53;
auto x55 = -cell[1];
auto x56 = cell[16] - cell[7];
auto x57 = x55 + x56;
auto x58 = x20 - cell[5];
auto x59 = x37 + x57 + x58;
auto x60 = x59*x59;
auto x61 = x48*x60;
auto x62 = x36 + x49;
auto x63 = -cell[18] + cell[9];
auto x64 = x41 + x62 + x63;
auto x65 = x64*x64;
auto x66 = x48*x65;
auto x67 = x61 + x66 + V{-1};
auto x68 = x54 + x67;
auto x69 = x47 + x68;
auto x70 = x32 - x43 + x69;
auto x71 = x25*(-x26 + x28 + x31 - x44 + x45 + x46 + V{3}*cell[10] - V{3}*cell[1]);
auto x72 = x57 + cell[10];
auto x73 = x38 + x51 + x62 + x72 + cell[11] + V{2}*cell[13] - V{2}*cell[4];
auto x74 = x34*(x73*x73);
auto x75 = x69 + x71 - x74;
auto x76 = x35 - cell[12];
auto x77 = x23 + x39 + x56 + x76 - cell[15] + V{2}*cell[18] - V{2}*cell[9];
auto x78 = -x77;
auto x79 = -x32;
auto x80 = x69 + x79;
auto x81 = -x34*x78*x78 + x80;
auto x82 = -x71;
auto x83 = -cell[17] + cell[8];
auto x84 = x36 + x63 + x72 + x83 - cell[11] + V{2}*cell[14] + cell[2] - V{2}*cell[5];
auto x85 = -x34*x84*x84;
auto x86 = x69 + x82 + x85;
auto x87 = x55 + x58;
auto x88 = x40 + x50 + x63 + x87 + cell[12] + V{2}*cell[15] - V{2}*cell[6];
auto x89 = x34*(x88*x88);
auto x90 = x32 + x68;
auto x91 = x71 - x89 + x90;
auto x92 = -x47;
auto x93 = -x34*x77*x77;
auto x94 = x90 + x92 + x93;
auto x95 = x51 + x76 + x83 + x87 + V{2}*cell[16] + cell[3] - V{2}*cell[7];
auto x96 = -x34*x95*x95;
auto x97 = x82 + x90 + x96;
auto x98 = -x84;
auto x99 = x68 + x71;
auto x100 = x92 + x99;
auto x101 = x100 - x34*x98*x98;
auto x102 = -x95;
auto x103 = x79 + x99;
auto x104 = x103 - x34*x102*x102;
auto x105 = V{0.00570175438596491}*cell[0] + V{0.00570175438596491}*cell[10] + V{0.00570175438596491}*cell[11] + V{0.00570175438596491}*cell[12] + V{0.00570175438596491}*cell[13] + V{0.00570175438596491}*cell[14] + V{0.00570175438596491}*cell[15] + V{0.00570175438596491}*cell[16] + V{0.00570175438596491}*cell[17] + V{0.00570175438596491}*cell[18] + V{0.00570175438596491}*cell[1] + V{0.00570175438596491}*cell[2] + V{0.00570175438596491}*cell[3] + V{0.00570175438596491}*cell[4] + V{0.00570175438596491}*cell[5] + V{0.00570175438596491}*cell[6] + V{0.00570175438596491}*cell[7] + V{0.00570175438596491}*cell[8] + V{0.00570175438596491}*cell[9] + V{0.00570175438596491};
auto x106 = V{3}*x33;
auto x107 = x106*x53;
auto x108 = -x107 + x47 + x67;
auto x109 = x106*x65;
auto x110 = x54 + V{-1};
auto x111 = -x109 + x110 + x32 + x61;
auto x112 = x106*x60;
auto x113 = x110 - x112 + x66 + x71;
auto x114 = -x66;
auto x115 = V{1} - x61;
auto x116 = x114 + x115;
auto x117 = x116 + x47;
auto x118 = -x54;
auto x119 = x118 + x32;
auto x120 = x117 + x119 + x43;
auto x121 = x118 + x71;
auto x122 = x117 + x121 + x74;
auto x123 = x116 + x119 + x71 + x89;
auto x124 = x107 + x117;
auto x125 = x109 + x115 + x119;
auto x126 = x112 + x114 + x121 + V{1};
auto x127 = V{0.00110298895386615}*cell[0] + V{0.00110298895386615}*cell[10] + V{0.00110298895386615}*cell[11] + V{0.00110298895386615}*cell[12] + V{0.00110298895386615}*cell[13] + V{0.00110298895386615}*cell[14] + V{0.00110298895386615}*cell[15] + V{0.00110298895386615}*cell[16] + V{0.00110298895386615}*cell[17] + V{0.00110298895386615}*cell[18] + V{0.00110298895386615}*cell[1] + V{0.00110298895386615}*cell[2] + V{0.00110298895386615}*cell[3] + V{0.00110298895386615}*cell[4] + V{0.00110298895386615}*cell[5] + V{0.00110298895386615}*cell[6] + V{0.00110298895386615}*cell[7] + V{0.00110298895386615}*cell[8] + V{0.00110298895386615}*cell[9] + V{0.00110298895386615};
auto x128 = V{0.0522303443794672}*cell[0] + V{0.0522303443794672}*cell[10] + V{0.0522303443794672}*cell[11] + V{0.0522303443794672}*cell[12] + V{0.0522303443794672}*cell[13] + V{0.0522303443794672}*cell[14] + V{0.0522303443794672}*cell[15] + V{0.0522303443794672}*cell[16] + V{0.0522303443794672}*cell[17] + V{0.0522303443794672}*cell[18] + V{0.0522303443794672}*cell[1] + V{0.0522303443794672}*cell[2] + V{0.0522303443794672}*cell[3] + V{0.0522303443794672}*cell[4] + V{0.0522303443794672}*cell[5] + V{0.0522303443794672}*cell[6] + V{0.0522303443794672}*cell[7] + V{0.0522303443794672}*cell[8] + V{0.0522303443794672}*cell[9] + V{0.0522303443794672};
auto x129 = V{0.00652046783625729}*cell[3];
auto x130 = V{0.00652046783625729}*cell[12];
auto x131 = V{0.102631578947368}*cell[0];
auto x132 = x68*(V{0.0342105263157895}*cell[0] + V{0.0342105263157895}*cell[10] + V{0.0342105263157895}*cell[11] + V{0.0342105263157895}*cell[12] + V{0.0342105263157895}*cell[13] + V{0.0342105263157895}*cell[14] + V{0.0342105263157895}*cell[15] + V{0.0342105263157895}*cell[16] + V{0.0342105263157895}*cell[17] + V{0.0342105263157895}*cell[18] + V{0.0342105263157895}*cell[1] + V{0.0342105263157895}*cell[2] + V{0.0342105263157895}*cell[3] + V{0.0342105263157895}*cell[4] + V{0.0342105263157895}*cell[5] + V{0.0342105263157895}*cell[6] + V{0.0342105263157895}*cell[7] + V{0.0342105263157895}*cell[8] + V{0.0342105263157895}*cell[9] + V{0.0342105263157895});
auto x133 = V{0.00732618583495776}*cell[0] + V{0.00732618583495776}*cell[10] + V{0.00732618583495776}*cell[11] + V{0.00732618583495776}*cell[12] + V{0.00732618583495776}*cell[13] + V{0.00732618583495776}*cell[14] + V{0.00732618583495776}*cell[15] + V{0.00732618583495776}*cell[16] + V{0.00732618583495776}*cell[17] + V{0.00732618583495776}*cell[18] + V{0.00732618583495776}*cell[1] + V{0.00732618583495776}*cell[2] + V{0.00732618583495776}*cell[3] + V{0.00732618583495776}*cell[4] + V{0.00732618583495776}*cell[5] + V{0.00732618583495776}*cell[6] + V{0.00732618583495776}*cell[7] + V{0.00732618583495776}*cell[8] + V{0.00732618583495776}*cell[9] + V{0.00732618583495776};
auto x134 = V{0.000362248213125405}*cell[0] + V{0.000362248213125405}*cell[10] + V{0.000362248213125405}*cell[11] + V{0.000362248213125405}*cell[12] + V{0.000362248213125405}*cell[13] + V{0.000362248213125405}*cell[14] + V{0.000362248213125405}*cell[15] + V{0.000362248213125405}*cell[16] + V{0.000362248213125405}*cell[17] + V{0.000362248213125405}*cell[18] + V{0.000362248213125405}*cell[1] + V{0.000362248213125405}*cell[2] + V{0.000362248213125405}*cell[3] + V{0.000362248213125405}*cell[4] + V{0.000362248213125405}*cell[5] + V{0.000362248213125405}*cell[6] + V{0.000362248213125405}*cell[7] + V{0.000362248213125405}*cell[8] + V{0.000362248213125405}*cell[9] + V{0.000362248213125405};
auto x135 = x111*x134;
auto x136 = V{0.000659519168291098}*cell[0] + V{0.000659519168291098}*cell[10] + V{0.000659519168291098}*cell[11] + V{0.000659519168291098}*cell[12] + V{0.000659519168291098}*cell[13] + V{0.000659519168291098}*cell[14] + V{0.000659519168291098}*cell[15] + V{0.000659519168291098}*cell[16] + V{0.000659519168291098}*cell[17] + V{0.000659519168291098}*cell[18] + V{0.000659519168291098}*cell[1] + V{0.000659519168291098}*cell[2] + V{0.000659519168291098}*cell[3] + V{0.000659519168291098}*cell[4] + V{0.000659519168291098}*cell[5] + V{0.000659519168291098}*cell[6] + V{0.000659519168291098}*cell[7] + V{0.000659519168291098}*cell[8] + V{0.000659519168291098}*cell[9] + V{0.000659519168291098};
auto x137 = -x125*x134;
auto x138 = -x122*x136 + x129 + x130 + x131 + x132 + x133*x75 + x135 + x137 + V{0.0237426900584795}*cell[13] + V{0.26374269005848}*cell[4];
auto x139 = V{0.00652046783625729}*cell[2];
auto x140 = V{0.00652046783625729}*cell[11];
auto x141 = x108*x134;
auto x142 = -x124*x134;
auto x143 = -x123*x136 + x133*x91 + x139 + x140 + x141 + x142 + V{0.0237426900584795}*cell[15] + V{0.26374269005848}*cell[6];
auto x144 = x100 + x85;
auto x145 = x133*x144 + x136*x86 + V{0.0237426900584795}*cell[14] + V{0.26374269005848}*cell[5];
auto x146 = x103 + x96;
auto x147 = x133*x146 + x136*x97 + V{0.0237426900584795}*cell[16] + V{0.26374269005848}*cell[7];
auto x148 = V{0.00248862897985705}*cell[0] + V{0.00248862897985705}*cell[10] + V{0.00248862897985705}*cell[11] + V{0.00248862897985705}*cell[12] + V{0.00248862897985705}*cell[13] + V{0.00248862897985705}*cell[14] + V{0.00248862897985705}*cell[15] + V{0.00248862897985705}*cell[16] + V{0.00248862897985705}*cell[17] + V{0.00248862897985705}*cell[18] + V{0.00248862897985705}*cell[1] + V{0.00248862897985705}*cell[2] + V{0.00248862897985705}*cell[3] + V{0.00248862897985705}*cell[4] + V{0.00248862897985705}*cell[5] + V{0.00248862897985705}*cell[6] + V{0.00248862897985705}*cell[7] + V{0.00248862897985705}*cell[8] + V{0.00248862897985705}*cell[9] + V{0.00248862897985705};
auto x149 = x80 + x93;
auto x150 = V{0.0277777777777778}*cell[0] + V{0.0277777777777778}*cell[10] + V{0.0277777777777778}*cell[11] + V{0.0277777777777778}*cell[12] + V{0.0277777777777778}*cell[13] + V{0.0277777777777778}*cell[14] + V{0.0277777777777778}*cell[15] + V{0.0277777777777778}*cell[16] + V{0.0277777777777778}*cell[17] + V{0.0277777777777778}*cell[18] + V{0.0277777777777778}*cell[1] + V{0.0277777777777778}*cell[2] + V{0.0277777777777778}*cell[3] + V{0.0277777777777778}*cell[4] + V{0.0277777777777778}*cell[5] + V{0.0277777777777778}*cell[6] + V{0.0277777777777778}*cell[7] + V{0.0277777777777778}*cell[8] + V{0.0277777777777778}*cell[9] + V{0.0277777777777778};
auto x151 = x146*x150;
auto x152 = V{0.0555555555555556}*cell[0] + V{0.0555555555555556}*cell[10] + V{0.0555555555555556}*cell[11] + V{0.0555555555555556}*cell[12] + V{0.0555555555555556}*cell[13] + V{0.0555555555555556}*cell[14] + V{0.0555555555555556}*cell[15] + V{0.0555555555555556}*cell[16] + V{0.0555555555555556}*cell[17] + V{0.0555555555555556}*cell[18] + V{0.0555555555555556}*cell[1] + V{0.0555555555555556}*cell[2] + V{0.0555555555555556}*cell[3] + V{0.0555555555555556}*cell[4] + V{0.0555555555555556}*cell[5] + V{0.0555555555555556}*cell[6] + V{0.0555555555555556}*cell[7] + V{0.0555555555555556}*cell[8] + V{0.0555555555555556}*cell[9] + V{0.0555555555555556};
auto x153 = V{1}*cell[7];
auto x154 = V{1}*cell[16];
auto x155 = x150*x97;
auto x156 = x153 + x154 + x155;
auto x157 = x150*x86;
auto x158 = V{1}*cell[4];
auto x159 = V{1}*cell[13];
auto x160 = x150*x75;
auto x161 = x122*x150;
auto x162 = V{1}*cell[14] + V{1}*cell[5];
auto x163 = -x111*x152 + x125*x152 + x158 + x159 + x160 - x161 + x162 - V{1}*cell[12] - V{1}*cell[3];
auto x164 = x144*x150 + x157 + x163;
auto x165 = V{1}*cell[6];
auto x166 = V{1}*cell[15];
auto x167 = V{1}*cell[2];
auto x168 = V{1}*cell[11];
auto x169 = x150*x91;
auto x170 = x124*x152;
auto x171 = V{0.111111111111111}*cell[0] + V{0.111111111111111}*cell[10] + V{0.111111111111111}*cell[11] + V{0.111111111111111}*cell[12] + V{0.111111111111111}*cell[13] + V{0.111111111111111}*cell[14] + V{0.111111111111111}*cell[15] + V{0.111111111111111}*cell[16] + V{0.111111111111111}*cell[17] + V{0.111111111111111}*cell[18] + V{0.111111111111111}*cell[1] + V{0.111111111111111}*cell[2] + V{0.111111111111111}*cell[3] + V{0.111111111111111}*cell[4] + V{0.111111111111111}*cell[5] + V{0.111111111111111}*cell[6] + V{0.111111111111111}*cell[7] + V{0.111111111111111}*cell[8] + V{0.111111111111111}*cell[9] + V{0.111111111111111};
auto x172 = x123*x150;
auto x173 = x108*x152;
auto x174 = x113*x171 + x120*x152 - x126*x171 - x152*x70 - x152*x94 + x165 + x166 - x167 - x168 + x169 + x170 - x172 - x173 + V{2}*cell[10] - V{2}*cell[17] - V{2}*cell[18] + V{2}*cell[1] - V{2}*cell[8] - V{2}*cell[9];
auto x175 = -x149*x152 + x151 + x156 + x164 + x174;
auto x176 = V{0.0555555555555556}*x175*x22;
auto x177 = x120*x148 - x148*x149 - x148*x70 - x148*x94 - x176 - V{0.0895906432748538}*cell[17] - V{0.0895906432748538}*cell[18] - V{0.0895906432748538}*cell[8] - V{0.0895906432748538}*cell[9];
auto x178 = V{0.00110298895386615}*cell[0] + V{0.00110298895386615}*cell[10] + V{0.00110298895386615}*cell[11] + V{0.00110298895386615}*cell[12] + V{0.00110298895386615}*cell[13] + V{0.00110298895386615}*cell[14] + V{0.00110298895386615}*cell[15] + V{0.00110298895386615}*cell[16] + V{0.00110298895386615}*cell[17] + V{0.00110298895386615}*cell[18] + V{0.00110298895386615}*cell[1] + V{0.00110298895386615}*cell[2] + V{0.00110298895386615}*cell[3] + V{0.00110298895386615}*cell[4] + V{0.00110298895386615}*cell[5] + V{0.00110298895386615}*cell[6] + V{0.00110298895386615}*cell[7] + V{0.00110298895386615}*cell[8] + V{0.00110298895386615}*cell[9] + V{0.00110298895386615};
auto x179 = V{0.0522303443794672}*cell[0] + V{0.0522303443794672}*cell[10] + V{0.0522303443794672}*cell[11] + V{0.0522303443794672}*cell[12] + V{0.0522303443794672}*cell[13] + V{0.0522303443794672}*cell[14] + V{0.0522303443794672}*cell[15] + V{0.0522303443794672}*cell[16] + V{0.0522303443794672}*cell[17] + V{0.0522303443794672}*cell[18] + V{0.0522303443794672}*cell[1] + V{0.0522303443794672}*cell[2] + V{0.0522303443794672}*cell[3] + V{0.0522303443794672}*cell[4] + V{0.0522303443794672}*cell[5] + V{0.0522303443794672}*cell[6] + V{0.0522303443794672}*cell[7] + V{0.0522303443794672}*cell[8] + V{0.0522303443794672}*cell[9] + V{0.0522303443794672};
auto x180 = x133*x86 + x136*x144 + V{0.26374269005848}*cell[14] + V{0.0237426900584795}*cell[5];
auto x181 = V{0.00652046783625729}*cell[1];
auto x182 = V{0.00652046783625729}*cell[10];
auto x183 = V{0.0277777777777778}*x22;
auto x184 = x175*x183;
auto x185 = x113*x134;
auto x186 = -x126*x134;
auto x187 = -x120*x136 + x133*x70 + x181 + x182 + x184 + x185 + x186 + V{0.0237426900584795}*cell[17] + V{0.26374269005848}*cell[8];
auto x188 = x133*x149 + x136*x94 + V{0.0237426900584795}*cell[18] + V{0.26374269005848}*cell[9];
auto x189 = V{0.0833333333333333}*x22;
auto x190 = -x165 - x166 - x169 + x172;
auto x191 = -x153 - x154 - x155 + x167 + x168 - x170 + x173 + x190;
auto x192 = x189*(-x151 + x164 + x191);
auto x193 = -x192;
auto x194 = x123*x148 - x146*x148 - x148*x91 - x148*x97 + x193 - V{0.0895906432748538}*cell[15] - V{0.0895906432748538}*cell[16] - V{0.0895906432748538}*cell[6] - V{0.0895906432748538}*cell[7];
auto x195 = x131 + x132 + x133*x97 + x136*x146 + V{0.26374269005848}*cell[16] + V{0.0237426900584795}*cell[7];
auto x196 = x133*x94 + x136*x149 + V{0.26374269005848}*cell[18] + V{0.0237426900584795}*cell[9];
auto x197 = x122*x148 - x144*x148 - x148*x75 - x148*x86 + x192 - V{0.0895906432748538}*cell[13] - V{0.0895906432748538}*cell[14] - V{0.0895906432748538}*cell[4] - V{0.0895906432748538}*cell[5] + V{0.00652046783625723};
auto x198 = V{0.00608390188434048}*cell[0] + V{0.00608390188434048}*cell[10] + V{0.00608390188434048}*cell[11] + V{0.00608390188434048}*cell[12] + V{0.00608390188434048}*cell[13] + V{0.00608390188434048}*cell[14] + V{0.00608390188434048}*cell[15] + V{0.00608390188434048}*cell[16] + V{0.00608390188434048}*cell[17] + V{0.00608390188434048}*cell[18] + V{0.00608390188434048}*cell[1] + V{0.00608390188434048}*cell[2] + V{0.00608390188434048}*cell[3] + V{0.00608390188434048}*cell[4] + V{0.00608390188434048}*cell[5] + V{0.00608390188434048}*cell[6] + V{0.00608390188434048}*cell[7] + V{0.00608390188434048}*cell[8] + V{0.00608390188434048}*cell[9] + V{0.00608390188434048};
auto x199 = V{0.00319850552306693}*cell[0] + V{0.00319850552306693}*cell[10] + V{0.00319850552306693}*cell[11] + V{0.00319850552306693}*cell[12] + V{0.00319850552306693}*cell[13] + V{0.00319850552306693}*cell[14] + V{0.00319850552306693}*cell[15] + V{0.00319850552306693}*cell[16] + V{0.00319850552306693}*cell[17] + V{0.00319850552306693}*cell[18] + V{0.00319850552306693}*cell[1] + V{0.00319850552306693}*cell[2] + V{0.00319850552306693}*cell[3] + V{0.00319850552306693}*cell[4] + V{0.00319850552306693}*cell[5] + V{0.00319850552306693}*cell[6] + V{0.00319850552306693}*cell[7] + V{0.00319850552306693}*cell[8] + V{0.00319850552306693}*cell[9] + V{0.00319850552306693};
auto x200 = V{0.00319850552306693}*cell[0] + V{0.00319850552306693}*cell[10] + V{0.00319850552306693}*cell[11] + V{0.00319850552306693}*cell[12] + V{0.00319850552306693}*cell[13] + V{0.00319850552306693}*cell[14] + V{0.00319850552306693}*cell[15] + V{0.00319850552306693}*cell[16] + V{0.00319850552306693}*cell[17] + V{0.00319850552306693}*cell[18] + V{0.00319850552306693}*cell[1] + V{0.00319850552306693}*cell[2] + V{0.00319850552306693}*cell[3] + V{0.00319850552306693}*cell[4] + V{0.00319850552306693}*cell[5] + V{0.00319850552306693}*cell[6] + V{0.00319850552306693}*cell[7] + V{0.00319850552306693}*cell[8] + V{0.00319850552306693}*cell[9] + V{0.00319850552306693};
auto x201 = V{0.0186151721897336}*cell[0] + V{0.0186151721897336}*cell[10] + V{0.0186151721897336}*cell[11] + V{0.0186151721897336}*cell[12] + V{0.0186151721897336}*cell[13] + V{0.0186151721897336}*cell[14] + V{0.0186151721897336}*cell[15] + V{0.0186151721897336}*cell[16] + V{0.0186151721897336}*cell[17] + V{0.0186151721897336}*cell[18] + V{0.0186151721897336}*cell[1] + V{0.0186151721897336}*cell[2] + V{0.0186151721897336}*cell[3] + V{0.0186151721897336}*cell[4] + V{0.0186151721897336}*cell[5] + V{0.0186151721897336}*cell[6] + V{0.0186151721897336}*cell[7] + V{0.0186151721897336}*cell[8] + V{0.0186151721897336}*cell[9] + V{0.0186151721897336};
auto x202 = V{0.0122181611435997}*cell[0] + V{0.0122181611435997}*cell[10] + V{0.0122181611435997}*cell[11] + V{0.0122181611435997}*cell[12] + V{0.0122181611435997}*cell[13] + V{0.0122181611435997}*cell[14] + V{0.0122181611435997}*cell[15] + V{0.0122181611435997}*cell[16] + V{0.0122181611435997}*cell[17] + V{0.0122181611435997}*cell[18] + V{0.0122181611435997}*cell[1] + V{0.0122181611435997}*cell[2] + V{0.0122181611435997}*cell[3] + V{0.0122181611435997}*cell[4] + V{0.0122181611435997}*cell[5] + V{0.0122181611435997}*cell[6] + V{0.0122181611435997}*cell[7] + V{0.0122181611435997}*cell[8] + V{0.0122181611435997}*cell[9] + V{0.0122181611435997};
auto x203 = V{0.0237426900584795}*cell[11];
auto x204 = V{0.26374269005848}*cell[2];
auto x205 = V{0.0146523716699155}*cell[0] + V{0.0146523716699155}*cell[10] + V{0.0146523716699155}*cell[11] + V{0.0146523716699155}*cell[12] + V{0.0146523716699155}*cell[13] + V{0.0146523716699155}*cell[14] + V{0.0146523716699155}*cell[15] + V{0.0146523716699155}*cell[16] + V{0.0146523716699155}*cell[17] + V{0.0146523716699155}*cell[18] + V{0.0146523716699155}*cell[1] + V{0.0146523716699155}*cell[2] + V{0.0146523716699155}*cell[3] + V{0.0146523716699155}*cell[4] + V{0.0146523716699155}*cell[5] + V{0.0146523716699155}*cell[6] + V{0.0146523716699155}*cell[7] + V{0.0146523716699155}*cell[8] + V{0.0146523716699155}*cell[9] + V{0.0146523716699155};
auto x206 = x108*x205;
auto x207 = V{0.0013190383365822}*cell[0] + V{0.0013190383365822}*cell[10] + V{0.0013190383365822}*cell[11] + V{0.0013190383365822}*cell[12] + V{0.0013190383365822}*cell[13] + V{0.0013190383365822}*cell[14] + V{0.0013190383365822}*cell[15] + V{0.0013190383365822}*cell[16] + V{0.0013190383365822}*cell[17] + V{0.0013190383365822}*cell[18] + V{0.0013190383365822}*cell[1] + V{0.0013190383365822}*cell[2] + V{0.0013190383365822}*cell[3] + V{0.0013190383365822}*cell[4] + V{0.0013190383365822}*cell[5] + V{0.0013190383365822}*cell[6] + V{0.0013190383365822}*cell[7] + V{0.0013190383365822}*cell[8] + V{0.0013190383365822}*cell[9] + V{0.0013190383365822};
auto x208 = -x124*x207;
auto x209 = V{0.00599943144899285}*cell[0] + V{0.00599943144899285}*cell[10] + V{0.00599943144899285}*cell[11] + V{0.00599943144899285}*cell[12] + V{0.00599943144899285}*cell[13] + V{0.00599943144899285}*cell[14] + V{0.00599943144899285}*cell[15] + V{0.00599943144899285}*cell[16] + V{0.00599943144899285}*cell[17] + V{0.00599943144899285}*cell[18] + V{0.00599943144899285}*cell[1] + V{0.00599943144899285}*cell[2] + V{0.00599943144899285}*cell[3] + V{0.00599943144899285}*cell[4] + V{0.00599943144899285}*cell[5] + V{0.00599943144899285}*cell[6] + V{0.00599943144899285}*cell[7] + V{0.00599943144899285}*cell[8] + V{0.00599943144899285}*cell[9] + V{0.00599943144899285};
auto x210 = x123*x209 + x198*x91 - V{0.215979532163743}*cell[15] + V{0.219020467836257}*cell[6];
auto x211 = x203 + x204 + x206 + x208 + x210;
auto x212 = V{0.0526315789473684}*cell[0];
auto x213 = x68*(V{0.0175438596491228}*cell[0] + V{0.0175438596491228}*cell[10] + V{0.0175438596491228}*cell[11] + V{0.0175438596491228}*cell[12] + V{0.0175438596491228}*cell[13] + V{0.0175438596491228}*cell[14] + V{0.0175438596491228}*cell[15] + V{0.0175438596491228}*cell[16] + V{0.0175438596491228}*cell[17] + V{0.0175438596491228}*cell[18] + V{0.0175438596491228}*cell[1] + V{0.0175438596491228}*cell[2] + V{0.0175438596491228}*cell[3] + V{0.0175438596491228}*cell[4] + V{0.0175438596491228}*cell[5] + V{0.0175438596491228}*cell[6] + V{0.0175438596491228}*cell[7] + V{0.0175438596491228}*cell[8] + V{0.0175438596491228}*cell[9] + V{0.0175438596491228});
auto x214 = x212 + x213 + V{0.0270760233918129};
auto x215 = -x209*x97 - V{0.215979532163743}*cell[16] + V{0.219020467836257}*cell[7];
auto x216 = x120*x209 + x198*x70 - V{0.215979532163743}*cell[17] + V{0.219020467836257}*cell[8];
auto x217 = V{0.0237426900584795}*cell[10];
auto x218 = V{0.26374269005848}*cell[1];
auto x219 = x113*x205;
auto x220 = -x126*x207;
auto x221 = -x209*x94 - V{0.215979532163743}*cell[18] + V{0.219020467836257}*cell[9];
auto x222 = x217 + x218 + x219 + x220 + x221;
auto x223 = -V{0.0895906432748538}*cell[3];
auto x224 = -V{0.0895906432748538}*cell[12];
auto x225 = V{0.25}*x22;
auto x226 = -x158 - x159 + x161 + x162;
auto x227 = V{0.0049772579597141}*cell[0] + V{0.0049772579597141}*cell[10] + V{0.0049772579597141}*cell[11] + V{0.0049772579597141}*cell[12] + V{0.0049772579597141}*cell[13] + V{0.0049772579597141}*cell[14] + V{0.0049772579597141}*cell[15] + V{0.0049772579597141}*cell[16] + V{0.0049772579597141}*cell[17] + V{0.0049772579597141}*cell[18] + V{0.0049772579597141}*cell[1] + V{0.0049772579597141}*cell[2] + V{0.0049772579597141}*cell[3] + V{0.0049772579597141}*cell[4] + V{0.0049772579597141}*cell[5] + V{0.0049772579597141}*cell[6] + V{0.0049772579597141}*cell[7] + V{0.0049772579597141}*cell[8] + V{0.0049772579597141}*cell[9] + V{0.0049772579597141};
auto x228 = x125*x227;
auto x229 = -x111*x227;
auto x230 = x104*x150;
auto x231 = x156 + x230;
auto x232 = x101*x150 + x157;
auto x233 = x163 + x232;
auto x234 = -x183*(-x152*x81 + x174 + x231 + x233) - x189*(x191 - x230 + x233) + x223 + x224 + x225*(x101*x150 - x150*x75 + x150*x86 + x226) + x228 + x229;
auto x235 = x146*x198 + x215;
auto x236 = V{0.0237426900584795}*cell[2];
auto x237 = V{0.26374269005848}*cell[11];
auto x238 = x108*x207;
auto x239 = -x124*x205;
auto x240 = x210 + x236 + x237 + x238 + x239;
auto x241 = V{0.219020467836257}*cell[17];
auto x242 = -V{0.215979532163743}*cell[8];
auto x243 = -x184;
auto x244 = -x120*x198;
auto x245 = -x209*x70;
auto x246 = x241 + x242 + x243 + x244 + x245;
auto x247 = x193 + x223 + x224 - x225*(-x160 + x226 + x232) + x228 + x229;
auto x248 = V{0.219020467836257}*cell[18];
auto x249 = -V{0.215979532163743}*cell[9];
auto x250 = x198*x94;
auto x251 = -x149*x209 + x248 + x249 + x250;
auto x252 = x217 + x218 + x219 + x220 + x251;
auto x253 = x225*(x190 + x231);
auto x254 = V{0.0237426900584795}*cell[12];
auto x255 = V{0.26374269005848}*cell[3];
auto x256 = x111*x205;
auto x257 = -x125*x207;
auto x258 = x122*x209 + x198*x75 - V{0.215979532163743}*cell[13] + V{0.219020467836257}*cell[4];
auto x259 = x254 + x255 + x256 + x257 + x258;
auto x260 = x216 + x243;
auto x261 = -V{0.0895906432748538}*cell[2];
auto x262 = -V{0.0895906432748538}*cell[11];
auto x263 = x124*x227;
auto x264 = -x108*x227;
auto x265 = V{0.219020467836257}*cell[5];
auto x266 = -V{0.215979532163743}*cell[14];
auto x267 = x144*x198;
auto x268 = -x209*x86;
auto x269 = x214 + x265 + x266 + x267 + x268;
auto x270 = x192 + x261 + x262 + x263 + x264 + x269;
auto x271 = -x253;
auto x272 = V{0.0237426900584795}*cell[3];
auto x273 = V{0.26374269005848}*cell[12];
auto x274 = x111*x207;
auto x275 = -x125*x205;
auto x276 = x258 + x272 + x273 + x274 + x275;
auto x277 = x149*x198;
auto x278 = x246 + x277;
auto x279 = -x144*x209 + x198*x86 + V{0.219020467836257}*cell[14] - V{0.215979532163743}*cell[5];
auto x280 = x198*x97 + x212 + x213 + V{0.219020467836257}*cell[16] - V{0.215979532163743}*cell[7] + V{0.0270760233918129};
auto x281 = -x146*x209 + x280;
auto x282 = -V{0.0895906432748538}*cell[1];
auto x283 = -V{0.0895906432748538}*cell[10];
auto x284 = x225*(x120*x150 - x150*x70 + x150*x81 + x150*x94 - V{1}*cell[17] + V{1}*cell[18] - V{1}*cell[8] + V{1}*cell[9]);
auto x285 = x126*x227;
auto x286 = -x113*x227;
auto x287 = V{0.00319850552306693}*cell[0] + V{0.00319850552306693}*cell[10] + V{0.00319850552306693}*cell[11] + V{0.00319850552306693}*cell[12] + V{0.00319850552306693}*cell[13] + V{0.00319850552306693}*cell[14] + V{0.00319850552306693}*cell[15] + V{0.00319850552306693}*cell[16] + V{0.00319850552306693}*cell[17] + V{0.00319850552306693}*cell[18] + V{0.00319850552306693}*cell[1] + V{0.00319850552306693}*cell[2] + V{0.00319850552306693}*cell[3] + V{0.00319850552306693}*cell[4] + V{0.00319850552306693}*cell[5] + V{0.00319850552306693}*cell[6] + V{0.00319850552306693}*cell[7] + V{0.00319850552306693}*cell[8] + V{0.00319850552306693}*cell[9] + V{0.00319850552306693};
auto x288 = -x149*x287 + x176 + x282 + x283 + x284 + x285 + x286 - x287*x94 - V{0.115146198830409}*cell[18] - V{0.115146198830409}*cell[9];
auto x289 = x214 + x279;
auto x290 = -x123*x198 - x209*x91 + V{0.219020467836257}*cell[15] - V{0.215979532163743}*cell[6];
auto x291 = x203 + x204 + x206 + x208 + x290;
auto x292 = x120*x287 + x176 + x282 + x283 - x284 + x285 + x286 - x287*x70 - V{0.115146198830409}*cell[17] - V{0.115146198830409}*cell[8];
auto x293 = -x122*x133 + x129 + x130 + x135 + x136*x75 + x137 + V{0.26374269005848}*cell[13] + V{0.0237426900584795}*cell[4];
auto x294 = -x123*x133 + x136*x91 + x139 + x140 + x141 + x142 + V{0.26374269005848}*cell[15] + V{0.0237426900584795}*cell[6];
auto x295 = -x120*x133 + x131 + x132 + x136*x70 + x181 + x182 + x184 + x185 + x186 + V{0.26374269005848}*cell[17] + V{0.0237426900584795}*cell[8];
auto x296 = x236 + x237 + x238 + x239 + x290;
auto x297 = x113*x207 - x126*x205 + V{0.26374269005848}*cell[10] + V{0.0237426900584795}*cell[1];
auto x298 = x221 + x297;
auto x299 = -x122*x198 - x209*x75 + V{0.219020467836257}*cell[13] - V{0.215979532163743}*cell[4];
auto x300 = x272 + x273 + x274 + x275 + x299;
auto x301 = x192 + x261 + x262 + x263 + x264 + x289;
auto x302 = x254 + x255 + x256 + x257 + x299;
auto x0 = x101*x19 + x104*x19 + x105*x108 + x105*x111 + x105*x113 - x105*x124 - x105*x125 - x105*x126 - x120*x19 - x122*x19 - x123*x19 + x19*x70 + x19*x75 + x19*x81 + x19*x86 + x19*x91 + x19*x94 + x19*x97 - x68*(V{0.41578947368421}*cell[0] + V{0.41578947368421}*cell[10] + V{0.41578947368421}*cell[11] + V{0.41578947368421}*cell[12] + V{0.41578947368421}*cell[13] + V{0.41578947368421}*cell[14] + V{0.41578947368421}*cell[15] + V{0.41578947368421}*cell[16] + V{0.41578947368421}*cell[17] + V{0.41578947368421}*cell[18] + V{0.41578947368421}*cell[1] + V{0.41578947368421}*cell[2] + V{0.41578947368421}*cell[3] + V{0.41578947368421}*cell[4] + V{0.41578947368421}*cell[5] + V{0.41578947368421}*cell[6] + V{0.41578947368421}*cell[7] + V{0.41578947368421}*cell[8] + V{0.41578947368421}*cell[9] + V{0.41578947368421}) - V{0.247368421052631}*cell[0] + V{0.102631578947368}*cell[10] + V{0.102631578947368}*cell[11] + V{0.102631578947368}*cell[12] + V{0.0526315789473684}*cell[13] + V{0.0526315789473684}*cell[14] + V{0.0526315789473684}*cell[15] + V{0.0526315789473684}*cell[16] + V{0.0526315789473684}*cell[17] + V{0.0526315789473684}*cell[18] + V{0.102631578947368}*cell[1] + V{0.102631578947368}*cell[2] + V{0.102631578947368}*cell[3] + V{0.0526315789473684}*cell[4] + V{0.0526315789473684}*cell[5] + V{0.0526315789473684}*cell[6] + V{0.0526315789473684}*cell[7] + V{0.0526315789473684}*cell[8] + V{0.0526315789473684}*cell[9] + V{-0.364035087719298};
auto x1 = -x113*x128 - x126*x127 + x138 + x143 + x145 + x147 + x177 + V{0.0198538011695907}*cell[10] + V{0.0598538011695906}*cell[1] + V{0.00652046783625724};
auto x2 = -x108*x179 - x124*x178 + x138 + x180 + x187 + x188 + x194 + V{0.0198538011695907}*cell[11] + V{0.0598538011695907}*cell[2] + V{0.00652046783625724};
auto x3 = -x111*x179 - x125*x178 + x143 + x187 + x195 + x196 + x197 + V{0.0198538011695907}*cell[12] + V{0.0598538011695907}*cell[3];
auto x4 = -x101*x199 + x104*x198 - x122*x202 + x198*x81 - x200*x86 - x201*x75 + x211 + x214 + x215 + x216 + x222 + x234 + V{0.439853801169591}*cell[13] - V{0.115146198830409}*cell[14] + V{0.329853801169591}*cell[4] - V{0.115146198830409}*cell[5];
auto x5 = x122*x200 - x144*x201 - x199*x75 + x202*x86 + x214 + x235 + x240 + x246 + x247 + x252 - V{0.115146198830409}*cell[13] + V{0.439853801169591}*cell[14] - V{0.115146198830409}*cell[4] + V{0.329853801169591}*cell[5];
auto x6 = -x123*x202 - x146*x199 - x200*x97 - x201*x91 + x252 + x253 + x259 + x260 + x270 + V{0.439853801169591}*cell[15] - V{0.115146198830409}*cell[16] + V{0.329853801169591}*cell[6] - V{0.115146198830409}*cell[7];
auto x7 = x123*x200 - x146*x201 - x199*x91 + x202*x97 + x222 + x270 + x271 + x276 + x278 - V{0.115146198830409}*cell[15] + V{0.439853801169591}*cell[16] - V{0.115146198830409}*cell[6] + V{0.329853801169591}*cell[7];
auto x8 = -x120*x202 - x201*x70 + x211 + x259 + x279 + x281 + x288 + V{0.439853801169591}*cell[17] + V{0.329853801169591}*cell[8];
auto x9 = -x149*x201 + x202*x94 + x235 + x276 + x289 + x291 + x292 + V{0.439853801169591}*cell[18] + V{0.329853801169591}*cell[9];
auto x10 = x113*x127 + x126*x128 + x177 + x180 + x195 + x293 + x294 + V{0.0598538011695906}*cell[10] + V{0.0198538011695907}*cell[1] + V{0.00652046783625723};
auto x11 = x108*x178 + x124*x179 + x145 + x194 + x196 + x293 + x295 + V{0.0598538011695907}*cell[11] + V{0.0198538011695907}*cell[2] + V{0.00652046783625723};
auto x12 = x111*x178 + x125*x179 + x147 + x188 + x197 + x294 + x295 + V{0.0598538011695907}*cell[12] + V{0.0198538011695907}*cell[3];
auto x13 = -x101*x200 - x104*x209 + x122*x201 - x199*x86 + x202*x75 - x209*x81 + x234 + x241 + x242 + x244 + x245 + x248 + x249 + x250 + x280 + x296 + x297 + V{0.329853801169591}*cell[13] - V{0.115146198830409}*cell[14] + V{0.439853801169591}*cell[4] - V{0.115146198830409}*cell[5];
auto x14 = x122*x199 + x144*x202 - x200*x75 - x201*x86 + x247 + x260 + x277 + x281 + x291 + x298 - V{0.115146198830409}*cell[13] + V{0.329853801169591}*cell[14] - V{0.115146198830409}*cell[4] + V{0.439853801169591}*cell[5];
auto x15 = x123*x201 - x146*x200 - x199*x97 + x202*x91 + x253 + x278 + x298 + x300 + x301 + V{0.329853801169591}*cell[15] - V{0.115146198830409}*cell[16] + V{0.439853801169591}*cell[6] - V{0.115146198830409}*cell[7];
auto x16 = x123*x199 + x146*x202 - x200*x91 - x201*x97 + x251 + x260 + x271 + x297 + x301 + x302 - V{0.115146198830409}*cell[15] + V{0.329853801169591}*cell[16] - V{0.115146198830409}*cell[6] + V{0.439853801169591}*cell[7];
auto x17 = x120*x201 + x202*x70 + x235 + x269 + x288 + x296 + x300 + V{0.329853801169591}*cell[17] + V{0.439853801169591}*cell[8];
auto x18 = x149*x202 - x201*x94 + x240 + x265 + x266 + x267 + x268 + x281 + x292 + x302 + V{0.329853801169591}*cell[18] + V{0.439853801169591}*cell[9];
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
cell[9] = x9;
cell[10] = x10;
cell[11] = x11;
cell[12] = x12;
cell[13] = x13;
cell[14] = x14;
cell[15] = x15;
cell[16] = x16;
cell[17] = x17;
cell[18] = x18;
return { x24, V{1}*x33*(x53 + x60 + x65) };
}

};


}

namespace forcing {

template <typename... FIELDS>
struct forcing::LaddVerberg::combined_collision<descriptors::D2Q5<FIELDS...>,momenta::BulkTuple,equilibria::SecondOrder,collision::MRT> {

template <CONCEPT(MinimalCell) CELL, typename PARAMETERS, typename V=typename CELL::value_t>
CellStatistic<V> apply(CELL& cell, PARAMETERS& parameters) any_platform
{
auto x7 = parameters.template get<olb::descriptors::OMEGA>();
auto x6 = cell.template getFieldComponent<olb::descriptors::FORCE>(1);
auto x5 = cell.template getFieldComponent<olb::descriptors::FORCE>(0);
auto x8 = V{0.05}*cell[0] + V{0.05}*cell[1] + V{0.05}*cell[2] + V{0.05}*cell[3] + V{0.05}*cell[4] + V{0.05};
auto x9 = cell[0] + cell[1] + cell[2] + cell[3] + cell[4];
auto x10 = x9 + V{1};
auto x11 = V{1} / (x10);
auto x12 = x11*(V{3}*cell[1] - V{3}*cell[3]);
auto x13 = V{1} / ((x10)*(x10));
auto x14 = V{3}*x13;
auto x15 = cell[1] - cell[3];
auto x16 = x15*x15;
auto x17 = V{1.5}*x13;
auto x18 = cell[2] - cell[4];
auto x19 = x18*x18;
auto x20 = x17*x19;
auto x21 = x12 + x14*x16 - x20 + V{1};
auto x22 = x20 + V{-1};
auto x23 = -x12 + V{3}*x13*x16 - x22;
auto x24 = V{3}*cell[2] - V{3}*cell[4];
auto x25 = x11*x24;
auto x26 = x16*x17;
auto x27 = x14*x19;
auto x28 = x25 + x26 - x27 + V{-1};
auto x29 = -x28;
auto x30 = -x18;
auto x31 = x30*x30;
auto x32 = -x15;
auto x33 = x17*(x32*x32) + V{-1};
auto x34 = x9 + V{1};
auto x35 = -x11*x24 - x14*x31 + x33;
auto x36 = x11*x34;
auto x37 = V{0.5}*x34;
auto x38 = x37*x5;
auto x39 = V{0.5}*x7;
auto x40 = V{0.166666666666667}*cell[0] + V{0.166666666666667}*cell[1] + V{0.166666666666667}*cell[2] + V{0.166666666666667}*cell[3] + V{0.166666666666667}*cell[4] + V{0.166666666666667};
auto x41 = x39*(-x21*x40 + x23*x40 + V{1}*cell[1] - V{1}*cell[3]);
auto x42 = V{0.075}*cell[0] + V{0.075}*cell[1] + V{0.075}*cell[2] + V{0.075}*cell[3] + V{0.075}*cell[4] + V{0.075};
auto x43 = V{0.05}*cell[0] + V{0.05}*cell[1] + V{0.05}*cell[2] + V{0.05}*cell[3] + V{0.05}*cell[4] + V{0.05};
auto x44 = -x25 + x26 - x27 + V{-1};
auto x45 = x15*x5;
auto x46 = -V{1}*x18*x6 + V{2}*x45;
auto x47 = x11*x37;
auto x48 = x39 + V{0.45};
auto x49 = V{0.25}*x36*x48;
auto x50 = x22 + x26;
auto x51 = x50*(V{0.1}*cell[0] + V{0.1}*cell[1] + V{0.1}*cell[2] + V{0.1}*cell[3] + V{0.1}*cell[4] + V{0.1}) + V{0.3}*cell[0] + V{0.05};
auto x52 = x21*x42 + x23*x42 + x28*x43 + x43*x44 - x46*x47 + x46*x49 + x51 + V{0.3}*cell[2] + V{0.3}*cell[4];
auto x53 = x28*x42;
auto x54 = x42*x44;
auto x55 = x21*x43;
auto x56 = x23*x43;
auto x57 = V{2}*x18*x6 - V{1}*x45;
auto x58 = x47*x57;
auto x59 = x37*x6 + x39*(x29*x40 + x35*x40 + V{1}*cell[2] - V{1}*cell[4]);
auto x0 = -x21*x8 - x23*x8 - x29*x8 + V{0.05}*x34*x35 - V{0.4}*x36*(x30*x6 + x32*x5) - (x17*x31 + x33)*(V{0.4}*cell[0] + V{0.4}*cell[1] + V{0.4}*cell[2] + V{0.4}*cell[3] + V{0.4}*cell[4] + V{0.4}) - V{0.2}*cell[0] + V{0.3}*cell[1] + V{0.3}*cell[2] + V{0.3}*cell[3] + V{0.3}*cell[4] + V{-0.2};
auto x1 = -x38 - x41 + x52 + V{0.55}*cell[1] - V{0.45}*cell[3];
auto x2 = V{0.25}*x11*x34*x48*x57 + V{0.1}*x34*x50 - x53 - x54 - x55 - x56 - x58 - x59 + V{0.3}*cell[0] + V{0.3}*cell[1] + V{0.55}*cell[2] + V{0.3}*cell[3] - V{0.45}*cell[4] + V{0.05};
auto x3 = x38 + x41 + x52 - V{0.45}*cell[1] + V{0.55}*cell[3];
auto x4 = x49*x57 + x51 - x53 - x54 - x55 - x56 - x58 + x59 + V{0.3}*cell[1] - V{0.45}*cell[2] + V{0.3}*cell[3] + V{0.55}*cell[4];
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
return { x10, V{1}*x13*(x16 + x19) };
}

};

template <typename... FIELDS>
struct forcing::LaddVerberg::combined_collision<descriptors::D2Q9<FIELDS...>,momenta::BulkTuple,equilibria::SecondOrder,collision::MRT> {

template <CONCEPT(MinimalCell) CELL, typename PARAMETERS, typename V=typename CELL::value_t>
CellStatistic<V> apply(CELL& cell, PARAMETERS& parameters) any_platform
{
auto x9 = cell.template getFieldComponent<olb::descriptors::FORCE>(0);
auto x10 = cell.template getFieldComponent<olb::descriptors::FORCE>(1);
auto x11 = parameters.template get<olb::descriptors::OMEGA>();
auto x12 = V{0.00339506172839506}*cell[0] + V{0.00339506172839506}*cell[1] + V{0.00339506172839506}*cell[2] + V{0.00339506172839506}*cell[3] + V{0.00339506172839506}*cell[4] + V{0.00339506172839506}*cell[5] + V{0.00339506172839506}*cell[6] + V{0.00339506172839506}*cell[7] + V{0.00339506172839506}*cell[8] + V{0.00339506172839506};
auto x13 = cell[0] + cell[1] + cell[2] + cell[3] + cell[4] + cell[5] + cell[6] + cell[7] + cell[8];
auto x14 = x13 + V{1};
auto x15 = V{1} / (x14);
auto x16 = V{3}*cell[7];
auto x17 = V{3}*cell[3];
auto x18 = V{3}*cell[1] - V{3}*cell[5];
auto x19 = x15*(x16 - x17 + x18 - V{3}*cell[4] + V{3}*cell[8]);
auto x20 = V{1} / ((x14)*(x14));
auto x21 = V{4.5}*x20;
auto x22 = -cell[4] + cell[8];
auto x23 = cell[2] - cell[6];
auto x24 = x22 + x23 + V{2}*cell[1] - V{2}*cell[5];
auto x25 = x21*(x24*x24);
auto x26 = -x16 + x17 + x18 + V{3}*cell[2] - V{3}*cell[6];
auto x27 = x15*x26;
auto x28 = V{1.5}*x20;
auto x29 = cell[1] - cell[5];
auto x30 = x23 + x29 + cell[3] - cell[7];
auto x31 = x30*x30;
auto x32 = x28*x31;
auto x33 = x22 + x29 - cell[3] + cell[7];
auto x34 = x33*x33;
auto x35 = x28*x34;
auto x36 = x35 + V{-1};
auto x37 = x32 + x36;
auto x38 = x27 + x37;
auto x39 = x19 - x25 + x38;
auto x40 = -x32;
auto x41 = -x19;
auto x42 = x23 + V{2}*cell[3] + cell[4] - V{2}*cell[7] - cell[8];
auto x43 = -x42;
auto x44 = x21*(x43*x43);
auto x45 = x27 - x35 + V{1};
auto x46 = -x40 - x41 - x44 - x45;
auto x47 = V{0.0135802469135802}*cell[0] + V{0.0135802469135802}*cell[1] + V{0.0135802469135802}*cell[2] + V{0.0135802469135802}*cell[3] + V{0.0135802469135802}*cell[4] + V{0.0135802469135802}*cell[5] + V{0.0135802469135802}*cell[6] + V{0.0135802469135802}*cell[7] + V{0.0135802469135802}*cell[8] + V{0.0135802469135802};
auto x48 = V{3}*x20;
auto x49 = x34*x48;
auto x50 = x19 - x49 + V{-1};
auto x51 = x32 + x50;
auto x52 = x19 + x40;
auto x53 = x45 + x52;
auto x54 = x25 + x53;
auto x55 = x38 + x41;
auto x56 = V{4.5}*x20*(x42*x42) - x55;
auto x57 = x31*x48 + x45;
auto x58 = x49 + x52 + V{1};
auto x59 = V{3}*x20*x31 - x27 - x36;
auto x60 = x10*x33;
auto x61 = x30*x9;
auto x62 = x13 + V{1};
auto x63 = x15*x62;
auto x64 = V{0.000848765432098765}*cell[0] + V{0.000848765432098765}*cell[1] + V{0.000848765432098765}*cell[2] + V{0.000848765432098765}*cell[3] + V{0.000848765432098765}*cell[4] + V{0.000848765432098765}*cell[5] + V{0.000848765432098765}*cell[6] + V{0.000848765432098765}*cell[7] + V{0.000848765432098765}*cell[8] + V{0.000848765432098765};
auto x65 = V{0.00933641975308642}*cell[0] + V{0.00933641975308642}*cell[1] + V{0.00933641975308642}*cell[2] + V{0.00933641975308642}*cell[3] + V{0.00933641975308642}*cell[4] + V{0.00933641975308642}*cell[5] + V{0.00933641975308642}*cell[6] + V{0.00933641975308642}*cell[7] + V{0.00933641975308642}*cell[8] + V{0.00933641975308642};
auto x66 = x10 - x9;
auto x67 = V{0.0833333333333333}*x62;
auto x68 = x66*x67;
auto x69 = V{1}*x60;
auto x70 = -x24;
auto x71 = V{3}*x66;
auto x72 = V{1}*x61;
auto x73 = x69 + x70*x71 - x72;
auto x74 = x15*x67;
auto x75 = V{0.25}*x11;
auto x76 = V{0.0416666666666667}*x63*(x75 + V{0.336111111111111});
auto x77 = V{0.00679012345679012}*cell[0] + V{0.00679012345679012}*cell[1] + V{0.00679012345679012}*cell[2] + V{0.00679012345679012}*cell[3] + V{0.00679012345679012}*cell[4] + V{0.00679012345679012}*cell[5] + V{0.00679012345679012}*cell[6] + V{0.00679012345679012}*cell[7] + V{0.00679012345679012}*cell[8] + V{0.00679012345679012};
auto x78 = V{0.0339506172839506}*cell[0] + V{0.0339506172839506}*cell[1] + V{0.0339506172839506}*cell[2] + V{0.0339506172839506}*cell[3] + V{0.0339506172839506}*cell[4] + V{0.0339506172839506}*cell[5] + V{0.0339506172839506}*cell[6] + V{0.0339506172839506}*cell[7] + V{0.0339506172839506}*cell[8] + V{0.0339506172839506};
auto x79 = V{0.122222222222222}*cell[0];
auto x80 = V{0.054320987654321}*cell[0] + V{0.054320987654321}*cell[1] + V{0.054320987654321}*cell[2] + V{0.054320987654321}*cell[3] + V{0.054320987654321}*cell[4] + V{0.054320987654321}*cell[5] + V{0.054320987654321}*cell[6] + V{0.054320987654321}*cell[7] + V{0.054320987654321}*cell[8] + V{0.054320987654321};
auto x81 = x37*x80 + x79;
auto x82 = -x57*x78 + x59*x77 + x81 + V{0.305555555555556}*cell[2] - V{0.0611111111111111}*cell[6] + V{0.0916666666666667};
auto x83 = -x51*x77 - x58*x78 - V{0.0611111111111111}*cell[4] + V{0.305555555555556}*cell[8];
auto x84 = V{0.00424382716049383}*cell[0] + V{0.00424382716049383}*cell[1] + V{0.00424382716049383}*cell[2] + V{0.00424382716049383}*cell[3] + V{0.00424382716049383}*cell[4] + V{0.00424382716049383}*cell[5] + V{0.00424382716049383}*cell[6] + V{0.00424382716049383}*cell[7] + V{0.00424382716049383}*cell[8] + V{0.00424382716049383};
auto x85 = V{0.0277777777777778}*cell[0] + V{0.0277777777777778}*cell[1] + V{0.0277777777777778}*cell[2] + V{0.0277777777777778}*cell[3] + V{0.0277777777777778}*cell[4] + V{0.0277777777777778}*cell[5] + V{0.0277777777777778}*cell[6] + V{0.0277777777777778}*cell[7] + V{0.0277777777777778}*cell[8] + V{0.0277777777777778};
auto x86 = x21*(x70*x70) + x53;
auto x87 = -x39;
auto x88 = -x44;
auto x89 = -x30;
auto x90 = x28*(x89*x89);
auto x91 = x36 + x90;
auto x92 = -x15*x26 + x19 + x88 + x91;
auto x93 = -x55 - x88;
auto x94 = x75*(V{0.0277777777777778}*x62*x93 - x85*x86 - x85*x87 - x85*x92 + V{1}*cell[1] - V{1}*cell[3] + V{1}*cell[5] - V{1}*cell[7]);
auto x95 = -x46*x84 + x56*x84 - x94 - V{0.152777777777778}*cell[3] - V{0.152777777777778}*cell[7];
auto x96 = V{0.152777777777778}*cell[4];
auto x97 = V{0.152777777777778}*cell[8];
auto x98 = V{0.00848765432098765}*cell[0] + V{0.00848765432098765}*cell[1] + V{0.00848765432098765}*cell[2] + V{0.00848765432098765}*cell[3] + V{0.00848765432098765}*cell[4] + V{0.00848765432098765}*cell[5] + V{0.00848765432098765}*cell[6] + V{0.00848765432098765}*cell[7] + V{0.00848765432098765}*cell[8] + V{0.00848765432098765};
auto x99 = V{0.0169753086419753}*cell[0] + V{0.0169753086419753}*cell[1] + V{0.0169753086419753}*cell[2] + V{0.0169753086419753}*cell[3] + V{0.0169753086419753}*cell[4] + V{0.0169753086419753}*cell[5] + V{0.0169753086419753}*cell[6] + V{0.0169753086419753}*cell[7] + V{0.0169753086419753}*cell[8] + V{0.0169753086419753};
auto x100 = V{0.00169753086419753}*cell[0] + V{0.00169753086419753}*cell[1] + V{0.00169753086419753}*cell[2] + V{0.00169753086419753}*cell[3] + V{0.00169753086419753}*cell[4] + V{0.00169753086419753}*cell[5] + V{0.00169753086419753}*cell[6] + V{0.00169753086419753}*cell[7] + V{0.00169753086419753}*cell[8] + V{0.00169753086419753};
auto x101 = V{0.0577160493827161}*cell[0] + V{0.0577160493827161}*cell[1] + V{0.0577160493827161}*cell[2] + V{0.0577160493827161}*cell[3] + V{0.0577160493827161}*cell[4] + V{0.0577160493827161}*cell[5] + V{0.0577160493827161}*cell[6] + V{0.0577160493827161}*cell[7] + V{0.0577160493827161}*cell[8] + V{0.0577160493827161};
auto x102 = V{0.111111111111111}*cell[0] + V{0.111111111111111}*cell[1] + V{0.111111111111111}*cell[2] + V{0.111111111111111}*cell[3] + V{0.111111111111111}*cell[4] + V{0.111111111111111}*cell[5] + V{0.111111111111111}*cell[6] + V{0.111111111111111}*cell[7] + V{0.111111111111111}*cell[8] + V{0.111111111111111};
auto x103 = x50 + x90;
auto x104 = x102*x103 + x102*x57 + x102*x59 - V{0.111111111111111}*x58*x62 - V{1}*cell[2] + V{1}*cell[4] - V{1}*cell[6] + V{1}*cell[8];
auto x105 = -x104*x75;
auto x106 = x103*x99;
auto x107 = V{0.333333333333333}*x62;
auto x108 = -x107*x9;
auto x109 = V{0.0237654320987654}*cell[0] + V{0.0237654320987654}*cell[1] + V{0.0237654320987654}*cell[2] + V{0.0237654320987654}*cell[3] + V{0.0237654320987654}*cell[4] + V{0.0237654320987654}*cell[5] + V{0.0237654320987654}*cell[6] + V{0.0237654320987654}*cell[7] + V{0.0237654320987654}*cell[8] + V{0.0237654320987654};
auto x110 = x69 - V{2}*x89*x9;
auto x111 = x107*x15;
auto x112 = x110*x111;
auto x113 = x75 + V{0.519444444444444};
auto x114 = V{0.166666666666667}*x113*x63;
auto x115 = V{0.305555555555556}*cell[3] - V{0.0611111111111111}*cell[7];
auto x116 = V{0.305555555555556}*cell[1] - V{0.0611111111111111}*cell[5];
auto x117 = x10 + x9;
auto x118 = x117*x67;
auto x119 = x51*x78 + x58*x77 + V{0.305555555555556}*cell[4] - V{0.0611111111111111}*cell[8];
auto x120 = -V{1}*x10*x33 + x72;
auto x121 = -V{3}*x117*x43 - x120;
auto x122 = -x121*x74 + x121*x76 - x39*x84 + x54*x84 + x94 - V{0.152777777777778}*cell[1] - V{0.152777777777778}*cell[5];
auto x123 = V{0.0611111111111111}*cell[1];
auto x124 = x10*x107;
auto x125 = V{2}*x60 + x72;
auto x126 = -x104*x75 + x111*x125 - x114*x125 + x57*x99 + x59*x99 + x81 - V{0.152777777777778}*cell[2] - V{0.152777777777778}*cell[6] + V{-4.85722573273506e-17};
auto x127 = -x120 - x24*x71;
auto x128 = x57*x77 - x59*x78 + x81 - V{0.0611111111111111}*cell[2] + V{0.305555555555556}*cell[6] + V{0.0916666666666667};
auto x129 = V{0.0611111111111111}*cell[3];
auto x0 = x12*x39 + x12*x46 - x12*x54 - x12*x56 - x37*(V{0.434567901234568}*cell[0] + V{0.434567901234568}*cell[1] + V{0.434567901234568}*cell[2] + V{0.434567901234568}*cell[3] + V{0.434567901234568}*cell[4] + V{0.434567901234568}*cell[5] + V{0.434567901234568}*cell[6] + V{0.434567901234568}*cell[7] + V{0.434567901234568}*cell[8] + V{0.434567901234568}) + x47*x51 - x47*x57 - x47*x58 - x47*x59 - V{0.681481481481481}*x63*(x60 - x61) + V{0.0222222222222221}*cell[0] + V{0.122222222222222}*cell[1] + V{0.122222222222222}*cell[2] + V{0.122222222222222}*cell[3] + V{0.122222222222222}*cell[4] + V{0.122222222222222}*cell[5] + V{0.122222222222222}*cell[6] + V{0.122222222222222}*cell[7] + V{0.122222222222222}*cell[8] + V{-0.366666666666667};
auto x1 = x39*x64 + x54*x65 + x68 - x73*x74 + x73*x76 + x82 + x83 + x95 + V{0.663888888888889}*cell[1] + V{0.0305555555555556}*cell[5];
auto x2 = x100*x87 + x100*x93 + x101*x57 - x105 - x106 + x108 - x109*x59 + x110*x114 - x112 + x115 + x116 + x58*x99 + x79 + x80*x91 - x86*x98 + x92*x98 - x96 - x97 + V{0.480555555555556}*cell[2] + V{0.213888888888889}*cell[6] + V{-4.60279962292513e-17};
auto x3 = -x118 + x119 + x122 - x46*x65 - x56*x64 + x82 + V{0.663888888888889}*cell[3] + V{0.0305555555555556}*cell[7];
auto x4 = x100*x54 + x100*x56 - x101*x51 - x109*x58 + x115 - x123 - x124 + x126 + x39*x98 + x46*x98 + V{0.480555555555556}*cell[4] + V{0.305555555555556}*cell[5] + V{0.213888888888889}*cell[8];
auto x5 = x119 - x127*x74 + x127*x76 + x128 - x39*x65 - x54*x64 - x68 + x95 + V{0.0305555555555556}*cell[1] + V{0.663888888888889}*cell[5];
auto x6 = -x100*x92 - x105 - x106 - x108 - x109*x57 + V{0.166666666666667}*x110*x113*x15*x62 - x112 - x123 - x129 + V{0.0169753086419753}*x58*x62 + V{0.0577160493827161}*x59*x62 + V{0.00169753086419753}*x62*x86 + V{0.054320987654321}*x62*x91 - x87*x98 - x93*x98 - x96 - x97 + V{0.122222222222222}*cell[0] + V{0.213888888888889}*cell[2] + V{0.305555555555556}*cell[5] + V{0.480555555555556}*cell[6] + V{0.305555555555556}*cell[7] + V{-5.11165184254499e-17};
auto x7 = x118 + x122 + x128 + x46*x64 + x56*x65 + x83 + V{0.0305555555555556}*cell[3] + V{0.663888888888889}*cell[7];
auto x8 = -x100*x39 - x100*x46 + x101*x58 + x109*x51 + x116 + x124 + x126 - x129 - x54*x98 - x56*x98 + V{0.213888888888889}*cell[4] + V{0.305555555555556}*cell[7] + V{0.480555555555556}*cell[8];
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
return { x14, V{1}*x20*(x31 + x34) };
}

};

template <typename... FIELDS>
struct forcing::LaddVerberg::combined_collision<descriptors::D3Q7<FIELDS...>,momenta::BulkTuple,equilibria::SecondOrder,collision::MRT> {

template <CONCEPT(MinimalCell) CELL, typename PARAMETERS, typename V=typename CELL::value_t>
CellStatistic<V> apply(CELL& cell, PARAMETERS& parameters) any_platform
{
auto x9 = cell.template getFieldComponent<olb::descriptors::FORCE>(2);
auto x7 = cell.template getFieldComponent<olb::descriptors::FORCE>(0);
auto x10 = parameters.template get<olb::descriptors::OMEGA>();
auto x8 = cell.template getFieldComponent<olb::descriptors::FORCE>(1);
auto x11 = cell[0] + cell[1] + cell[2] + cell[3] + cell[4] + cell[5] + cell[6];
auto x12 = x11 + V{1};
auto x13 = V{1} / ((x12)*(x12));
auto x14 = V{2}*x13;
auto x15 = cell[1] - cell[4];
auto x16 = x15*x15;
auto x17 = x14*x16;
auto x18 = cell[2] - cell[5];
auto x19 = x18*x18;
auto x20 = x14*x19;
auto x21 = cell[3] - cell[6];
auto x22 = x21*x21;
auto x23 = x14*x22;
auto x24 = x20 + x23 + V{-1};
auto x25 = x17 + x24;
auto x26 = x15*x7;
auto x27 = x18*x8;
auto x28 = x21*x9;
auto x29 = V{1} / (x12);
auto x30 = x11 + V{1};
auto x31 = x29*x30;
auto x32 = V{0.271428571428571}*cell[2];
auto x33 = V{0.271428571428571}*cell[3];
auto x34 = V{0.271428571428571}*cell[5];
auto x35 = V{0.271428571428571}*cell[6];
auto x36 = V{0.0339285714285714}*cell[0] + V{0.0339285714285714}*cell[1] + V{0.0339285714285714}*cell[2] + V{0.0339285714285714}*cell[3] + V{0.0339285714285714}*cell[4] + V{0.0339285714285714}*cell[5] + V{0.0339285714285714}*cell[6] + V{0.0339285714285714};
auto x37 = V{4}*cell[2] - V{4}*cell[5];
auto x38 = x29*x37;
auto x39 = V{6}*x13;
auto x40 = x19*x39;
auto x41 = x17 + V{-1};
auto x42 = x23 + x38 - x40 + x41;
auto x43 = x36*x42;
auto x44 = V{4}*cell[3] - V{4}*cell[6];
auto x45 = x29*x44;
auto x46 = x22*x39;
auto x47 = x20 + x41 + x45 - x46;
auto x48 = x36*x47;
auto x49 = -x17;
auto x50 = V{1} - x23;
auto x51 = -x38 - x40 - x49 - x50;
auto x52 = x36*x51;
auto x53 = -x20;
auto x54 = -x45 - x46 - x49 - x53 + V{-1};
auto x55 = x36*x54;
auto x56 = x32 + x33 + x34 + x35 + x43 + x48 + x52 + x55;
auto x57 = V{4}*cell[1] - V{4}*cell[4];
auto x58 = x29*x57;
auto x59 = x16*x39;
auto x60 = x24 + x58 - x59;
auto x61 = -x50 - x53 - x58 - x59;
auto x62 = x36*x60 + x36*x61 + V{0.271428571428571}*cell[1] + V{0.271428571428571}*cell[4];
auto x63 = V{0.5}*x10;
auto x64 = V{0.125}*cell[0] + V{0.125}*cell[1] + V{0.125}*cell[2] + V{0.125}*cell[3] + V{0.125}*cell[4] + V{0.125}*cell[5] + V{0.125}*cell[6] + V{0.125};
auto x65 = -x18;
auto x66 = x65*x65;
auto x67 = x14*x66;
auto x68 = -x15;
auto x69 = x68*x68;
auto x70 = -x21;
auto x71 = x70*x70;
auto x72 = x14*x71 + V{-1};
auto x73 = x63*(-x60*x64 + x64*(-x29*x57 - x39*x69 + x67 + x72) + V{1}*cell[1] - V{1}*cell[4]);
auto x74 = V{0.5}*x30;
auto x75 = x7*x74;
auto x76 = V{0.0848214285714286}*cell[0] + V{0.0848214285714286}*cell[1] + V{0.0848214285714286}*cell[2] + V{0.0848214285714286}*cell[3] + V{0.0848214285714286}*cell[4] + V{0.0848214285714286}*cell[5] + V{0.0848214285714286}*cell[6] + V{0.0848214285714286};
auto x77 = V{1}*x27;
auto x78 = V{1}*x28;
auto x79 = V{3}*x15*x7 - x77 - x78;
auto x80 = x29*x74;
auto x81 = V{0.25}*x31;
auto x82 = x25*(V{0.0678571428571428}*cell[0] + V{0.0678571428571428}*cell[1] + V{0.0678571428571428}*cell[2] + V{0.0678571428571428}*cell[3] + V{0.0678571428571428}*cell[4] + V{0.0678571428571428}*cell[5] + V{0.0678571428571428}*cell[6] + V{0.0678571428571428}) + V{0.271428571428571}*cell[0] + V{0.0339285714285714};
auto x83 = x56 - x60*x76 - x61*x76 - x79*x80 + x79*x81*(x63 + V{0.678571428571428}) + x82;
auto x84 = x14*x69;
auto x85 = x63*(-x42*x64 + x64*(-x29*x37 - x39*x66 + x72 + x84) + V{1}*cell[2] - V{1}*cell[5]);
auto x86 = x74*x8;
auto x87 = V{0.0848214285714286}*cell[0] + V{0.0848214285714286}*cell[1] + V{0.0848214285714286}*cell[2] + V{0.0848214285714286}*cell[3] + V{0.0848214285714286}*cell[4] + V{0.0848214285714286}*cell[5] + V{0.0848214285714286}*cell[6] + V{0.0848214285714286};
auto x88 = V{1}*x26;
auto x89 = V{3}*x18*x8 - x78 - x88;
auto x90 = x81*(x63 + V{0.678571428571429});
auto x91 = x62 + x82;
auto x92 = x33 + x35 - x42*x87 + x48 - x51*x87 + x55 - x80*x89 + x89*x90 + x91;
auto x93 = x63*(-x47*x64 + x64*(-x29*x44 - x39*x71 + x67 + x84 + V{-1}) + V{1}*cell[3] - V{1}*cell[6]);
auto x94 = x74*x9;
auto x95 = V{3}*x21*x9 - x77 - x88;
auto x96 = x32 + x34 + x43 - x47*x87 + x52 - x54*x87 - x80*x95 + x90*x95 + x91;
auto x0 = -x25*(V{0.407142857142857}*cell[0] + V{0.407142857142857}*cell[1] + V{0.407142857142857}*cell[2] + V{0.407142857142857}*cell[3] + V{0.407142857142857}*cell[4] + V{0.407142857142857}*cell[5] + V{0.407142857142857}*cell[6] + V{0.407142857142857}) + V{0.185714285714286}*x31*(x26 + x27 + x28) + x56 + x62 - V{0.628571428571429}*cell[0] + V{-0.203571428571429};
auto x1 = -x73 - x75 + x83 + V{0.321428571428572}*cell[1] - V{0.678571428571428}*cell[4];
auto x2 = -x85 - x86 + x92 + V{0.321428571428571}*cell[2] - V{0.678571428571429}*cell[5];
auto x3 = -x93 - x94 + x96 + V{0.321428571428571}*cell[3] - V{0.678571428571429}*cell[6];
auto x4 = x73 + x75 + x83 - V{0.678571428571428}*cell[1] + V{0.321428571428572}*cell[4];
auto x5 = x85 + x86 + x92 - V{0.678571428571429}*cell[2] + V{0.321428571428571}*cell[5];
auto x6 = x93 + x94 + x96 - V{0.678571428571429}*cell[3] + V{0.321428571428571}*cell[6];
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
return { x12, V{1}*x13*(x16 + x19 + x22) };
}

};

template <typename... FIELDS>
struct forcing::LaddVerberg::combined_collision<descriptors::D3Q19<FIELDS...>,momenta::BulkTuple,equilibria::SecondOrder,collision::MRT> {

template <CONCEPT(MinimalCell) CELL, typename PARAMETERS, typename V=typename CELL::value_t>
CellStatistic<V> apply(CELL& cell, PARAMETERS& parameters) any_platform
{
auto x21 = cell.template getFieldComponent<olb::descriptors::FORCE>(2);
auto x19 = cell.template getFieldComponent<olb::descriptors::FORCE>(0);
auto x22 = parameters.template get<olb::descriptors::OMEGA>();
auto x20 = cell.template getFieldComponent<olb::descriptors::FORCE>(1);
auto x23 = V{0.00146198830409357}*cell[0] + V{0.00146198830409357}*cell[10] + V{0.00146198830409357}*cell[11] + V{0.00146198830409357}*cell[12] + V{0.00146198830409357}*cell[13] + V{0.00146198830409357}*cell[14] + V{0.00146198830409357}*cell[15] + V{0.00146198830409357}*cell[16] + V{0.00146198830409357}*cell[17] + V{0.00146198830409357}*cell[18] + V{0.00146198830409357}*cell[1] + V{0.00146198830409357}*cell[2] + V{0.00146198830409357}*cell[3] + V{0.00146198830409357}*cell[4] + V{0.00146198830409357}*cell[5] + V{0.00146198830409357}*cell[6] + V{0.00146198830409357}*cell[7] + V{0.00146198830409357}*cell[8] + V{0.00146198830409357}*cell[9] + V{0.00146198830409357};
auto x24 = cell[10] + cell[14];
auto x25 = cell[12] + cell[7];
auto x26 = cell[3] + cell[6];
auto x27 = x24 + x25 + x26 + cell[0] + cell[11] + cell[13] + cell[15] + cell[16] + cell[17] + cell[18] + cell[1] + cell[2] + cell[4] + cell[5] + cell[8] + cell[9];
auto x28 = x27 + V{1};
auto x29 = V{1} / (x28);
auto x30 = V{3}*cell[7];
auto x31 = V{3}*cell[9];
auto x32 = V{3}*cell[16];
auto x33 = V{3}*cell[18];
auto x34 = V{3}*cell[17] - V{3}*cell[8];
auto x35 = V{3}*cell[15] - V{3}*cell[6];
auto x36 = x29*(x30 + x31 - x32 - x33 + x34 + x35 + V{3}*cell[12] - V{3}*cell[3]);
auto x37 = V{1} / ((x28)*(x28));
auto x38 = V{4.5}*x37;
auto x39 = cell[13] - cell[4];
auto x40 = cell[15] - cell[6];
auto x41 = x39 + x40;
auto x42 = -cell[2];
auto x43 = x42 + cell[11] - cell[14] + cell[5];
auto x44 = -cell[3];
auto x45 = x25 + x44 - cell[16];
auto x46 = x41 + x43 + x45 + V{2}*cell[17] - V{2}*cell[8];
auto x47 = x38*(x46*x46);
auto x48 = V{3}*cell[5];
auto x49 = V{3}*cell[14];
auto x50 = V{3}*cell[13] - V{3}*cell[4];
auto x51 = x29*(-x31 + x33 + x34 + x48 - x49 + x50 + V{3}*cell[11] - V{3}*cell[2]);
auto x52 = V{1.5}*x37;
auto x53 = cell[17] - cell[8];
auto x54 = x39 + x53;
auto x55 = cell[18] - cell[9];
auto x56 = x43 + x54 + x55;
auto x57 = x56*x56;
auto x58 = x52*x57;
auto x59 = -cell[1];
auto x60 = cell[16] - cell[7];
auto x61 = x59 + x60;
auto x62 = x24 - cell[5];
auto x63 = x41 + x61 + x62;
auto x64 = x63*x63;
auto x65 = x52*x64;
auto x66 = x40 + x53;
auto x67 = -cell[18] + cell[9];
auto x68 = x45 + x66 + x67;
auto x69 = x68*x68;
auto x70 = x52*x69;
auto x71 = x65 + x70 + V{-1};
auto x72 = x58 + x71;
auto x73 = x51 + x72;
auto x74 = x36 - x47 + x73;
auto x75 = x29*(-x30 + x32 + x35 - x48 + x49 + x50 + V{3}*cell[10] - V{3}*cell[1]);
auto x76 = x61 + cell[10];
auto x77 = x42 + x55 + x66 + x76 + cell[11] + V{2}*cell[13] - V{2}*cell[4];
auto x78 = x38*(x77*x77);
auto x79 = x73 + x75 - x78;
auto x80 = x39 - cell[12];
auto x81 = x26 + x43 + x60 + x80 - cell[15] + V{2}*cell[18] - V{2}*cell[9];
auto x82 = -x38*x81*x81;
auto x83 = -x36;
auto x84 = x73 + x83;
auto x85 = x82 + x84;
auto x86 = -x75;
auto x87 = -cell[17] + cell[8];
auto x88 = x40 + x67 + x76 + x87 - cell[11] + V{2}*cell[14] + cell[2] - V{2}*cell[5];
auto x89 = -x38*x88*x88;
auto x90 = x73 + x86 + x89;
auto x91 = x59 + x62;
auto x92 = x44 + x54 + x67 + x91 + cell[12] + V{2}*cell[15] - V{2}*cell[6];
auto x93 = x38*(x92*x92);
auto x94 = x36 + x72;
auto x95 = x75 - x93 + x94;
auto x96 = -x51;
auto x97 = x82 + x94 + x96;
auto x98 = x55 + x80 + x87 + x91 + V{2}*cell[16] + cell[3] - V{2}*cell[7];
auto x99 = -x38*x98*x98;
auto x100 = x86 + x94 + x99;
auto x101 = x72 + x75;
auto x102 = x101 + x96;
auto x103 = x102 + x89;
auto x104 = x101 + x83;
auto x105 = x104 + x99;
auto x106 = V{0.00570175438596491}*cell[0] + V{0.00570175438596491}*cell[10] + V{0.00570175438596491}*cell[11] + V{0.00570175438596491}*cell[12] + V{0.00570175438596491}*cell[13] + V{0.00570175438596491}*cell[14] + V{0.00570175438596491}*cell[15] + V{0.00570175438596491}*cell[16] + V{0.00570175438596491}*cell[17] + V{0.00570175438596491}*cell[18] + V{0.00570175438596491}*cell[1] + V{0.00570175438596491}*cell[2] + V{0.00570175438596491}*cell[3] + V{0.00570175438596491}*cell[4] + V{0.00570175438596491}*cell[5] + V{0.00570175438596491}*cell[6] + V{0.00570175438596491}*cell[7] + V{0.00570175438596491}*cell[8] + V{0.00570175438596491}*cell[9] + V{0.00570175438596491};
auto x107 = V{3}*x37;
auto x108 = x107*x57;
auto x109 = -x108 + x51 + x71;
auto x110 = x107*x69;
auto x111 = x58 + V{-1};
auto x112 = -x110 + x111 + x36 + x65;
auto x113 = x107*x64;
auto x114 = x111 - x113 + x70 + x75;
auto x115 = -x70;
auto x116 = V{1} - x65;
auto x117 = x115 + x116;
auto x118 = x117 + x51;
auto x119 = -x58;
auto x120 = x119 + x36;
auto x121 = x118 + x120 + x47;
auto x122 = x119 + x75;
auto x123 = x118 + x122 + x78;
auto x124 = x117 + x120 + x75 + x93;
auto x125 = x108 + x118;
auto x126 = x110 + x116 + x120;
auto x127 = x113 + x115 + x122 + V{1};
auto x128 = x19*x63;
auto x129 = x20*x56;
auto x130 = x21*x68;
auto x131 = x27 + V{1};
auto x132 = x131*x29;
auto x133 = V{0.00110298895386615}*cell[0] + V{0.00110298895386615}*cell[10] + V{0.00110298895386615}*cell[11] + V{0.00110298895386615}*cell[12] + V{0.00110298895386615}*cell[13] + V{0.00110298895386615}*cell[14] + V{0.00110298895386615}*cell[15] + V{0.00110298895386615}*cell[16] + V{0.00110298895386615}*cell[17] + V{0.00110298895386615}*cell[18] + V{0.00110298895386615}*cell[1] + V{0.00110298895386615}*cell[2] + V{0.00110298895386615}*cell[3] + V{0.00110298895386615}*cell[4] + V{0.00110298895386615}*cell[5] + V{0.00110298895386615}*cell[6] + V{0.00110298895386615}*cell[7] + V{0.00110298895386615}*cell[8] + V{0.00110298895386615}*cell[9] + V{0.00110298895386615};
auto x134 = V{0.166666666666667}*x131;
auto x135 = x134*x19;
auto x136 = V{0.0522303443794672}*cell[0] + V{0.0522303443794672}*cell[10] + V{0.0522303443794672}*cell[11] + V{0.0522303443794672}*cell[12] + V{0.0522303443794672}*cell[13] + V{0.0522303443794672}*cell[14] + V{0.0522303443794672}*cell[15] + V{0.0522303443794672}*cell[16] + V{0.0522303443794672}*cell[17] + V{0.0522303443794672}*cell[18] + V{0.0522303443794672}*cell[1] + V{0.0522303443794672}*cell[2] + V{0.0522303443794672}*cell[3] + V{0.0522303443794672}*cell[4] + V{0.0522303443794672}*cell[5] + V{0.0522303443794672}*cell[6] + V{0.0522303443794672}*cell[7] + V{0.0522303443794672}*cell[8] + V{0.0522303443794672}*cell[9] + V{0.0522303443794672};
auto x137 = V{0.00652046783625729}*cell[3];
auto x138 = V{0.00652046783625729}*cell[12];
auto x139 = V{0.102631578947368}*cell[0];
auto x140 = x72*(V{0.0342105263157895}*cell[0] + V{0.0342105263157895}*cell[10] + V{0.0342105263157895}*cell[11] + V{0.0342105263157895}*cell[12] + V{0.0342105263157895}*cell[13] + V{0.0342105263157895}*cell[14] + V{0.0342105263157895}*cell[15] + V{0.0342105263157895}*cell[16] + V{0.0342105263157895}*cell[17] + V{0.0342105263157895}*cell[18] + V{0.0342105263157895}*cell[1] + V{0.0342105263157895}*cell[2] + V{0.0342105263157895}*cell[3] + V{0.0342105263157895}*cell[4] + V{0.0342105263157895}*cell[5] + V{0.0342105263157895}*cell[6] + V{0.0342105263157895}*cell[7] + V{0.0342105263157895}*cell[8] + V{0.0342105263157895}*cell[9] + V{0.0342105263157895});
auto x141 = V{0.00732618583495776}*cell[0] + V{0.00732618583495776}*cell[10] + V{0.00732618583495776}*cell[11] + V{0.00732618583495776}*cell[12] + V{0.00732618583495776}*cell[13] + V{0.00732618583495776}*cell[14] + V{0.00732618583495776}*cell[15] + V{0.00732618583495776}*cell[16] + V{0.00732618583495776}*cell[17] + V{0.00732618583495776}*cell[18] + V{0.00732618583495776}*cell[1] + V{0.00732618583495776}*cell[2] + V{0.00732618583495776}*cell[3] + V{0.00732618583495776}*cell[4] + V{0.00732618583495776}*cell[5] + V{0.00732618583495776}*cell[6] + V{0.00732618583495776}*cell[7] + V{0.00732618583495776}*cell[8] + V{0.00732618583495776}*cell[9] + V{0.00732618583495776};
auto x142 = V{0.000362248213125405}*cell[0] + V{0.000362248213125405}*cell[10] + V{0.000362248213125405}*cell[11] + V{0.000362248213125405}*cell[12] + V{0.000362248213125405}*cell[13] + V{0.000362248213125405}*cell[14] + V{0.000362248213125405}*cell[15] + V{0.000362248213125405}*cell[16] + V{0.000362248213125405}*cell[17] + V{0.000362248213125405}*cell[18] + V{0.000362248213125405}*cell[1] + V{0.000362248213125405}*cell[2] + V{0.000362248213125405}*cell[3] + V{0.000362248213125405}*cell[4] + V{0.000362248213125405}*cell[5] + V{0.000362248213125405}*cell[6] + V{0.000362248213125405}*cell[7] + V{0.000362248213125405}*cell[8] + V{0.000362248213125405}*cell[9] + V{0.000362248213125405};
auto x143 = x112*x142;
auto x144 = V{0.000659519168291098}*cell[0] + V{0.000659519168291098}*cell[10] + V{0.000659519168291098}*cell[11] + V{0.000659519168291098}*cell[12] + V{0.000659519168291098}*cell[13] + V{0.000659519168291098}*cell[14] + V{0.000659519168291098}*cell[15] + V{0.000659519168291098}*cell[16] + V{0.000659519168291098}*cell[17] + V{0.000659519168291098}*cell[18] + V{0.000659519168291098}*cell[1] + V{0.000659519168291098}*cell[2] + V{0.000659519168291098}*cell[3] + V{0.000659519168291098}*cell[4] + V{0.000659519168291098}*cell[5] + V{0.000659519168291098}*cell[6] + V{0.000659519168291098}*cell[7] + V{0.000659519168291098}*cell[8] + V{0.000659519168291098}*cell[9] + V{0.000659519168291098};
auto x145 = -x126*x142;
auto x146 = -x123*x144 + x137 + x138 + x139 + x140 + x141*x79 + x143 + x145 + V{0.0237426900584795}*cell[13] + V{0.26374269005848}*cell[4];
auto x147 = V{0.00652046783625729}*cell[2];
auto x148 = V{0.00652046783625729}*cell[11];
auto x149 = x109*x142;
auto x150 = -x125*x142;
auto x151 = -x124*x144 + x141*x95 + x147 + x148 + x149 + x150 + V{0.0237426900584795}*cell[15] + V{0.26374269005848}*cell[6];
auto x152 = x103*x141 + x144*x90 + V{0.0237426900584795}*cell[14] + V{0.26374269005848}*cell[5];
auto x153 = x100*x144 + x105*x141 + V{0.0237426900584795}*cell[16] + V{0.26374269005848}*cell[7];
auto x154 = V{0.00248862897985705}*cell[0] + V{0.00248862897985705}*cell[10] + V{0.00248862897985705}*cell[11] + V{0.00248862897985705}*cell[12] + V{0.00248862897985705}*cell[13] + V{0.00248862897985705}*cell[14] + V{0.00248862897985705}*cell[15] + V{0.00248862897985705}*cell[16] + V{0.00248862897985705}*cell[17] + V{0.00248862897985705}*cell[18] + V{0.00248862897985705}*cell[1] + V{0.00248862897985705}*cell[2] + V{0.00248862897985705}*cell[3] + V{0.00248862897985705}*cell[4] + V{0.00248862897985705}*cell[5] + V{0.00248862897985705}*cell[6] + V{0.00248862897985705}*cell[7] + V{0.00248862897985705}*cell[8] + V{0.00248862897985705}*cell[9] + V{0.00248862897985705};
auto x155 = V{1}*cell[6];
auto x156 = V{1}*cell[15];
auto x157 = V{1}*cell[2];
auto x158 = V{1}*cell[11];
auto x159 = V{0.0277777777777778}*cell[0] + V{0.0277777777777778}*cell[10] + V{0.0277777777777778}*cell[11] + V{0.0277777777777778}*cell[12] + V{0.0277777777777778}*cell[13] + V{0.0277777777777778}*cell[14] + V{0.0277777777777778}*cell[15] + V{0.0277777777777778}*cell[16] + V{0.0277777777777778}*cell[17] + V{0.0277777777777778}*cell[18] + V{0.0277777777777778}*cell[1] + V{0.0277777777777778}*cell[2] + V{0.0277777777777778}*cell[3] + V{0.0277777777777778}*cell[4] + V{0.0277777777777778}*cell[5] + V{0.0277777777777778}*cell[6] + V{0.0277777777777778}*cell[7] + V{0.0277777777777778}*cell[8] + V{0.0277777777777778}*cell[9] + V{0.0277777777777778};
auto x160 = x159*x95;
auto x161 = x105*x159;
auto x162 = V{0.0555555555555556}*cell[0] + V{0.0555555555555556}*cell[10] + V{0.0555555555555556}*cell[11] + V{0.0555555555555556}*cell[12] + V{0.0555555555555556}*cell[13] + V{0.0555555555555556}*cell[14] + V{0.0555555555555556}*cell[15] + V{0.0555555555555556}*cell[16] + V{0.0555555555555556}*cell[17] + V{0.0555555555555556}*cell[18] + V{0.0555555555555556}*cell[1] + V{0.0555555555555556}*cell[2] + V{0.0555555555555556}*cell[3] + V{0.0555555555555556}*cell[4] + V{0.0555555555555556}*cell[5] + V{0.0555555555555556}*cell[6] + V{0.0555555555555556}*cell[7] + V{0.0555555555555556}*cell[8] + V{0.0555555555555556}*cell[9] + V{0.0555555555555556};
auto x163 = x125*x162;
auto x164 = V{0.111111111111111}*cell[0] + V{0.111111111111111}*cell[10] + V{0.111111111111111}*cell[11] + V{0.111111111111111}*cell[12] + V{0.111111111111111}*cell[13] + V{0.111111111111111}*cell[14] + V{0.111111111111111}*cell[15] + V{0.111111111111111}*cell[16] + V{0.111111111111111}*cell[17] + V{0.111111111111111}*cell[18] + V{0.111111111111111}*cell[1] + V{0.111111111111111}*cell[2] + V{0.111111111111111}*cell[3] + V{0.111111111111111}*cell[4] + V{0.111111111111111}*cell[5] + V{0.111111111111111}*cell[6] + V{0.111111111111111}*cell[7] + V{0.111111111111111}*cell[8] + V{0.111111111111111}*cell[9] + V{0.111111111111111};
auto x165 = x124*x159;
auto x166 = x109*x162;
auto x167 = V{1}*cell[7];
auto x168 = V{1}*cell[16];
auto x169 = x100*x159;
auto x170 = x167 + x168 + x169;
auto x171 = V{1}*cell[4];
auto x172 = V{1}*cell[13];
auto x173 = x159*x79;
auto x174 = x123*x159;
auto x175 = x159*x90 + V{1}*cell[14] + V{1}*cell[5];
auto x176 = x103*x159 - x112*x162 + x126*x162 + x171 + x172 + x173 - x174 + x175 - V{1}*cell[12] - V{1}*cell[3];
auto x177 = x114*x164 + x121*x162 - x127*x164 + x155 + x156 - x157 - x158 + x160 + x161 - x162*x74 - x162*x85 - x162*x97 + x163 - x165 - x166 + x170 + x176 + V{2}*cell[10] - V{2}*cell[17] - V{2}*cell[18] + V{2}*cell[1] - V{2}*cell[8] - V{2}*cell[9];
auto x178 = V{0.0555555555555556}*x177*x22;
auto x179 = V{1}*x129;
auto x180 = V{1}*x130;
auto x181 = x179 + x180;
auto x182 = -V{2}*x128 + x181;
auto x183 = x134*x29;
auto x184 = V{0.111111111111111}*x22;
auto x185 = V{0.0833333333333333}*x131;
auto x186 = x185*x29;
auto x187 = x121*x154 - x154*x74 - x154*x85 - x154*x97 - x178 - x182*x183 + x182*x186*(x184 + V{0.940146198830409}) - V{0.0895906432748538}*cell[17] - V{0.0895906432748538}*cell[18] - V{0.0895906432748538}*cell[8] - V{0.0895906432748538}*cell[9];
auto x188 = V{0.00110298895386615}*cell[0] + V{0.00110298895386615}*cell[10] + V{0.00110298895386615}*cell[11] + V{0.00110298895386615}*cell[12] + V{0.00110298895386615}*cell[13] + V{0.00110298895386615}*cell[14] + V{0.00110298895386615}*cell[15] + V{0.00110298895386615}*cell[16] + V{0.00110298895386615}*cell[17] + V{0.00110298895386615}*cell[18] + V{0.00110298895386615}*cell[1] + V{0.00110298895386615}*cell[2] + V{0.00110298895386615}*cell[3] + V{0.00110298895386615}*cell[4] + V{0.00110298895386615}*cell[5] + V{0.00110298895386615}*cell[6] + V{0.00110298895386615}*cell[7] + V{0.00110298895386615}*cell[8] + V{0.00110298895386615}*cell[9] + V{0.00110298895386615};
auto x189 = V{0.0522303443794672}*cell[0] + V{0.0522303443794672}*cell[10] + V{0.0522303443794672}*cell[11] + V{0.0522303443794672}*cell[12] + V{0.0522303443794672}*cell[13] + V{0.0522303443794672}*cell[14] + V{0.0522303443794672}*cell[15] + V{0.0522303443794672}*cell[16] + V{0.0522303443794672}*cell[17] + V{0.0522303443794672}*cell[18] + V{0.0522303443794672}*cell[1] + V{0.0522303443794672}*cell[2] + V{0.0522303443794672}*cell[3] + V{0.0522303443794672}*cell[4] + V{0.0522303443794672}*cell[5] + V{0.0522303443794672}*cell[6] + V{0.0522303443794672}*cell[7] + V{0.0522303443794672}*cell[8] + V{0.0522303443794672}*cell[9] + V{0.0522303443794672};
auto x190 = x134*x20;
auto x191 = x103*x144 + x141*x90 + V{0.26374269005848}*cell[14] + V{0.0237426900584795}*cell[5];
auto x192 = V{0.00652046783625729}*cell[1];
auto x193 = V{0.00652046783625729}*cell[10];
auto x194 = V{0.0277777777777778}*x177*x22;
auto x195 = x114*x142;
auto x196 = -x127*x142;
auto x197 = -x121*x144 + x141*x74 + x192 + x193 + x194 + x195 + x196 + V{0.0237426900584795}*cell[17] + V{0.26374269005848}*cell[8];
auto x198 = x141*x85 + x144*x97 + V{0.0237426900584795}*cell[18] + V{0.26374269005848}*cell[9];
auto x199 = -x155 - x156 - x160 + x165;
auto x200 = V{0.0833333333333333}*x22*(x157 + x158 - x161 - x163 + x166 - x167 - x168 - x169 + x176 + x199);
auto x201 = -x200;
auto x202 = V{1}*x128;
auto x203 = -V{2}*x129 + x180 + x202;
auto x204 = x186*(x184 + V{0.940146198830409});
auto x205 = -x100*x154 - x105*x154 + x124*x154 - x154*x95 - x183*x203 + x201 + x203*x204 - V{0.0895906432748538}*cell[15] - V{0.0895906432748538}*cell[16] - V{0.0895906432748538}*cell[6] - V{0.0895906432748538}*cell[7];
auto x206 = x134*x21;
auto x207 = x100*x141 + x105*x144 + x139 + x140 + V{0.26374269005848}*cell[16] + V{0.0237426900584795}*cell[7];
auto x208 = x141*x97 + x144*x85 + V{0.26374269005848}*cell[18] + V{0.0237426900584795}*cell[9];
auto x209 = -V{2}*x130 + x179 + x202;
auto x210 = -x103*x154 + x123*x154 - x154*x79 - x154*x90 - x183*x209 + x200 + x204*x209 - V{0.0895906432748538}*cell[13] - V{0.0895906432748538}*cell[14] - V{0.0895906432748538}*cell[4] - V{0.0895906432748538}*cell[5] + V{0.00652046783625723};
auto x211 = V{0.00319850552306693}*cell[0] + V{0.00319850552306693}*cell[10] + V{0.00319850552306693}*cell[11] + V{0.00319850552306693}*cell[12] + V{0.00319850552306693}*cell[13] + V{0.00319850552306693}*cell[14] + V{0.00319850552306693}*cell[15] + V{0.00319850552306693}*cell[16] + V{0.00319850552306693}*cell[17] + V{0.00319850552306693}*cell[18] + V{0.00319850552306693}*cell[1] + V{0.00319850552306693}*cell[2] + V{0.00319850552306693}*cell[3] + V{0.00319850552306693}*cell[4] + V{0.00319850552306693}*cell[5] + V{0.00319850552306693}*cell[6] + V{0.00319850552306693}*cell[7] + V{0.00319850552306693}*cell[8] + V{0.00319850552306693}*cell[9] + V{0.00319850552306693};
auto x212 = V{0.00319850552306693}*cell[0] + V{0.00319850552306693}*cell[10] + V{0.00319850552306693}*cell[11] + V{0.00319850552306693}*cell[12] + V{0.00319850552306693}*cell[13] + V{0.00319850552306693}*cell[14] + V{0.00319850552306693}*cell[15] + V{0.00319850552306693}*cell[16] + V{0.00319850552306693}*cell[17] + V{0.00319850552306693}*cell[18] + V{0.00319850552306693}*cell[1] + V{0.00319850552306693}*cell[2] + V{0.00319850552306693}*cell[3] + V{0.00319850552306693}*cell[4] + V{0.00319850552306693}*cell[5] + V{0.00319850552306693}*cell[6] + V{0.00319850552306693}*cell[7] + V{0.00319850552306693}*cell[8] + V{0.00319850552306693}*cell[9] + V{0.00319850552306693};
auto x213 = V{0.0186151721897336}*cell[0] + V{0.0186151721897336}*cell[10] + V{0.0186151721897336}*cell[11] + V{0.0186151721897336}*cell[12] + V{0.0186151721897336}*cell[13] + V{0.0186151721897336}*cell[14] + V{0.0186151721897336}*cell[15] + V{0.0186151721897336}*cell[16] + V{0.0186151721897336}*cell[17] + V{0.0186151721897336}*cell[18] + V{0.0186151721897336}*cell[1] + V{0.0186151721897336}*cell[2] + V{0.0186151721897336}*cell[3] + V{0.0186151721897336}*cell[4] + V{0.0186151721897336}*cell[5] + V{0.0186151721897336}*cell[6] + V{0.0186151721897336}*cell[7] + V{0.0186151721897336}*cell[8] + V{0.0186151721897336}*cell[9] + V{0.0186151721897336};
auto x214 = x19 + x20;
auto x215 = x185*x214;
auto x216 = V{0.0122181611435997}*cell[0] + V{0.0122181611435997}*cell[10] + V{0.0122181611435997}*cell[11] + V{0.0122181611435997}*cell[12] + V{0.0122181611435997}*cell[13] + V{0.0122181611435997}*cell[14] + V{0.0122181611435997}*cell[15] + V{0.0122181611435997}*cell[16] + V{0.0122181611435997}*cell[17] + V{0.0122181611435997}*cell[18] + V{0.0122181611435997}*cell[1] + V{0.0122181611435997}*cell[2] + V{0.0122181611435997}*cell[3] + V{0.0122181611435997}*cell[4] + V{0.0122181611435997}*cell[5] + V{0.0122181611435997}*cell[6] + V{0.0122181611435997}*cell[7] + V{0.0122181611435997}*cell[8] + V{0.0122181611435997}*cell[9] + V{0.0122181611435997};
auto x217 = V{0.0237426900584795}*cell[11];
auto x218 = V{0.26374269005848}*cell[2];
auto x219 = V{0.0146523716699155}*cell[0] + V{0.0146523716699155}*cell[10] + V{0.0146523716699155}*cell[11] + V{0.0146523716699155}*cell[12] + V{0.0146523716699155}*cell[13] + V{0.0146523716699155}*cell[14] + V{0.0146523716699155}*cell[15] + V{0.0146523716699155}*cell[16] + V{0.0146523716699155}*cell[17] + V{0.0146523716699155}*cell[18] + V{0.0146523716699155}*cell[1] + V{0.0146523716699155}*cell[2] + V{0.0146523716699155}*cell[3] + V{0.0146523716699155}*cell[4] + V{0.0146523716699155}*cell[5] + V{0.0146523716699155}*cell[6] + V{0.0146523716699155}*cell[7] + V{0.0146523716699155}*cell[8] + V{0.0146523716699155}*cell[9] + V{0.0146523716699155};
auto x220 = x109*x219;
auto x221 = V{0.0013190383365822}*cell[0] + V{0.0013190383365822}*cell[10] + V{0.0013190383365822}*cell[11] + V{0.0013190383365822}*cell[12] + V{0.0013190383365822}*cell[13] + V{0.0013190383365822}*cell[14] + V{0.0013190383365822}*cell[15] + V{0.0013190383365822}*cell[16] + V{0.0013190383365822}*cell[17] + V{0.0013190383365822}*cell[18] + V{0.0013190383365822}*cell[1] + V{0.0013190383365822}*cell[2] + V{0.0013190383365822}*cell[3] + V{0.0013190383365822}*cell[4] + V{0.0013190383365822}*cell[5] + V{0.0013190383365822}*cell[6] + V{0.0013190383365822}*cell[7] + V{0.0013190383365822}*cell[8] + V{0.0013190383365822}*cell[9] + V{0.0013190383365822};
auto x222 = -x125*x221;
auto x223 = V{0.0526315789473684}*cell[0];
auto x224 = V{0.00608390188434048}*cell[0] + V{0.00608390188434048}*cell[10] + V{0.00608390188434048}*cell[11] + V{0.00608390188434048}*cell[12] + V{0.00608390188434048}*cell[13] + V{0.00608390188434048}*cell[14] + V{0.00608390188434048}*cell[15] + V{0.00608390188434048}*cell[16] + V{0.00608390188434048}*cell[17] + V{0.00608390188434048}*cell[18] + V{0.00608390188434048}*cell[1] + V{0.00608390188434048}*cell[2] + V{0.00608390188434048}*cell[3] + V{0.00608390188434048}*cell[4] + V{0.00608390188434048}*cell[5] + V{0.00608390188434048}*cell[6] + V{0.00608390188434048}*cell[7] + V{0.00608390188434048}*cell[8] + V{0.00608390188434048}*cell[9] + V{0.00608390188434048};
auto x225 = x72*(V{0.0175438596491228}*cell[0] + V{0.0175438596491228}*cell[10] + V{0.0175438596491228}*cell[11] + V{0.0175438596491228}*cell[12] + V{0.0175438596491228}*cell[13] + V{0.0175438596491228}*cell[14] + V{0.0175438596491228}*cell[15] + V{0.0175438596491228}*cell[16] + V{0.0175438596491228}*cell[17] + V{0.0175438596491228}*cell[18] + V{0.0175438596491228}*cell[1] + V{0.0175438596491228}*cell[2] + V{0.0175438596491228}*cell[3] + V{0.0175438596491228}*cell[4] + V{0.0175438596491228}*cell[5] + V{0.0175438596491228}*cell[6] + V{0.0175438596491228}*cell[7] + V{0.0175438596491228}*cell[8] + V{0.0175438596491228}*cell[9] + V{0.0175438596491228});
auto x226 = V{0.00599943144899285}*cell[0] + V{0.00599943144899285}*cell[10] + V{0.00599943144899285}*cell[11] + V{0.00599943144899285}*cell[12] + V{0.00599943144899285}*cell[13] + V{0.00599943144899285}*cell[14] + V{0.00599943144899285}*cell[15] + V{0.00599943144899285}*cell[16] + V{0.00599943144899285}*cell[17] + V{0.00599943144899285}*cell[18] + V{0.00599943144899285}*cell[1] + V{0.00599943144899285}*cell[2] + V{0.00599943144899285}*cell[3] + V{0.00599943144899285}*cell[4] + V{0.00599943144899285}*cell[5] + V{0.00599943144899285}*cell[6] + V{0.00599943144899285}*cell[7] + V{0.00599943144899285}*cell[8] + V{0.00599943144899285}*cell[9] + V{0.00599943144899285};
auto x227 = x124*x226 + x223 + x224*x95 + x225 - V{0.215979532163743}*cell[15] + V{0.219020467836257}*cell[6] + V{0.0270760233918129};
auto x228 = x217 + x218 + x220 + x222 + x227;
auto x229 = -x100*x226 + x105*x224 - V{0.215979532163743}*cell[16] + V{0.219020467836257}*cell[7];
auto x230 = -x194;
auto x231 = x224*x85 - x226*x97 + x230 - V{0.215979532163743}*cell[18] + V{0.219020467836257}*cell[9];
auto x232 = V{0.0237426900584795}*cell[10];
auto x233 = V{0.26374269005848}*cell[1];
auto x234 = x114*x219;
auto x235 = -x127*x221;
auto x236 = x121*x226 + x224*x74 - V{0.215979532163743}*cell[17] + V{0.219020467836257}*cell[8];
auto x237 = x232 + x233 + x234 + x235 + x236;
auto x238 = -V{0.0895906432748538}*cell[3];
auto x239 = -V{0.0895906432748538}*cell[12];
auto x240 = V{0.25}*x22;
auto x241 = -x88;
auto x242 = x240*(x159*(x102 - x38*x241*x241) - x171 - x172 - x173 + x174 + x175);
auto x243 = V{0.0049772579597141}*cell[0] + V{0.0049772579597141}*cell[10] + V{0.0049772579597141}*cell[11] + V{0.0049772579597141}*cell[12] + V{0.0049772579597141}*cell[13] + V{0.0049772579597141}*cell[14] + V{0.0049772579597141}*cell[15] + V{0.0049772579597141}*cell[16] + V{0.0049772579597141}*cell[17] + V{0.0049772579597141}*cell[18] + V{0.0049772579597141}*cell[1] + V{0.0049772579597141}*cell[2] + V{0.0049772579597141}*cell[3] + V{0.0049772579597141}*cell[4] + V{0.0049772579597141}*cell[5] + V{0.0049772579597141}*cell[6] + V{0.0049772579597141}*cell[7] + V{0.0049772579597141}*cell[8] + V{0.0049772579597141}*cell[9] + V{0.0049772579597141};
auto x244 = x126*x243;
auto x245 = -x112*x243;
auto x246 = x181 + x202;
auto x247 = -V{3}*x214*x77 + x246;
auto x248 = V{0.0416666666666667}*x132*(V{0.361111111111111}*x22 + V{0.670146198830409});
auto x249 = -x186*x247 + x201 + x238 + x239 + x242 + x244 + x245 + x247*x248;
auto x250 = x19 - x20;
auto x251 = x185*x250;
auto x252 = V{0.0237426900584795}*cell[2];
auto x253 = V{0.26374269005848}*cell[11];
auto x254 = x109*x221;
auto x255 = -x125*x219;
auto x256 = x229 + x252 + x253 + x254 + x255;
auto x257 = x224*x97 - x226*x85 + x230 + V{0.219020467836257}*cell[18] - V{0.215979532163743}*cell[9];
auto x258 = -x121*x224 - x226*x74 + V{0.219020467836257}*cell[17] - V{0.215979532163743}*cell[8];
auto x259 = x232 + x233 + x234 + x235 + x258;
auto x260 = x246 - V{3}*x250*x88;
auto x261 = -x186*x260 + x201 + x238 + x239 - x242 + x244 + x245 + x248*x260;
auto x262 = x19 + x21;
auto x263 = x185*x262;
auto x264 = V{0.0237426900584795}*cell[12];
auto x265 = V{0.26374269005848}*cell[3];
auto x266 = x112*x219;
auto x267 = -x126*x221;
auto x268 = x123*x226 + x224*x79 - V{0.215979532163743}*cell[13] + V{0.219020467836257}*cell[4];
auto x269 = x264 + x265 + x266 + x267 + x268;
auto x270 = -V{0.0895906432748538}*cell[2];
auto x271 = -V{0.0895906432748538}*cell[11];
auto x272 = x125*x243;
auto x273 = -x109*x243;
auto x274 = V{0.219020467836257}*cell[5];
auto x275 = -V{0.215979532163743}*cell[14];
auto x276 = x103*x224;
auto x277 = -x226*x90;
auto x278 = x223 + x225 + V{0.0270760233918129};
auto x279 = x274 + x275 + x276 + x277 + x278;
auto x280 = x200 + x270 + x271 + x272 + x273 + x279;
auto x281 = -x98;
auto x282 = x240*(x159*(x104 - x38*x281*x281) + x170 + x199);
auto x283 = x246 - V{3}*x262*x92;
auto x284 = -x186*x283 + x248*x283 + x282;
auto x285 = -x21;
auto x286 = x19 + x285;
auto x287 = x185*x286;
auto x288 = V{0.0237426900584795}*cell[3];
auto x289 = V{0.26374269005848}*cell[12];
auto x290 = x112*x221;
auto x291 = -x126*x219;
auto x292 = x268 + x288 + x289 + x290 + x291;
auto x293 = x246 - V{3}*x286*x98;
auto x294 = -x186*x293 + x248*x293 - x282;
auto x295 = x20 + x21;
auto x296 = x185*x295;
auto x297 = x100*x224 - x105*x226 + V{0.219020467836257}*cell[16] - V{0.215979532163743}*cell[7];
auto x298 = -x103*x226 + x224*x90 + V{0.219020467836257}*cell[14] - V{0.215979532163743}*cell[5];
auto x299 = -V{0.0895906432748538}*cell[1];
auto x300 = -V{0.0895906432748538}*cell[10];
auto x301 = -x81;
auto x302 = x240*(x121*x159 - x159*x74 + x159*x97 + x159*(-x38*x301*x301 + x84) - V{1}*cell[17] + V{1}*cell[18] - V{1}*cell[8] + V{1}*cell[9]);
auto x303 = x127*x243;
auto x304 = -x114*x243;
auto x305 = V{0.00319850552306693}*cell[0] + V{0.00319850552306693}*cell[10] + V{0.00319850552306693}*cell[11] + V{0.00319850552306693}*cell[12] + V{0.00319850552306693}*cell[13] + V{0.00319850552306693}*cell[14] + V{0.00319850552306693}*cell[15] + V{0.00319850552306693}*cell[16] + V{0.00319850552306693}*cell[17] + V{0.00319850552306693}*cell[18] + V{0.00319850552306693}*cell[1] + V{0.00319850552306693}*cell[2] + V{0.00319850552306693}*cell[3] + V{0.00319850552306693}*cell[4] + V{0.00319850552306693}*cell[5] + V{0.00319850552306693}*cell[6] + V{0.00319850552306693}*cell[7] + V{0.00319850552306693}*cell[8] + V{0.00319850552306693}*cell[9] + V{0.00319850552306693};
auto x306 = x246 - V{3}*x295*x46;
auto x307 = x178 - x186*x306 + x248*x306 + x299 + x300 + x302 + x303 + x304 - x305*x85 - x305*x97 - V{0.115146198830409}*cell[18] - V{0.115146198830409}*cell[9];
auto x308 = x20 + x285;
auto x309 = x185*x308;
auto x310 = x278 + x298;
auto x311 = -x124*x224 - x226*x95 + V{0.219020467836257}*cell[15] - V{0.215979532163743}*cell[6];
auto x312 = x217 + x218 + x220 + x222 + x311;
auto x313 = x246 - V{3}*x308*x81;
auto x314 = x121*x305 + x178 - x186*x313 + x248*x313 + x299 + x300 - x302 + x303 + x304 - x305*x74 - V{0.115146198830409}*cell[17] - V{0.115146198830409}*cell[8];
auto x315 = -x123*x141 + x137 + x138 + x143 + x144*x79 + x145 + V{0.26374269005848}*cell[13] + V{0.0237426900584795}*cell[4];
auto x316 = -x124*x141 + x144*x95 + x147 + x148 + x149 + x150 + V{0.26374269005848}*cell[15] + V{0.0237426900584795}*cell[6];
auto x317 = -x121*x141 + x139 + x140 + x144*x74 + x192 + x193 + x194 + x195 + x196 + V{0.26374269005848}*cell[17] + V{0.0237426900584795}*cell[8];
auto x318 = x252 + x253 + x254 + x255 + x297;
auto x319 = V{0.0237426900584795}*cell[1];
auto x320 = V{0.26374269005848}*cell[10];
auto x321 = x114*x221;
auto x322 = -x127*x219;
auto x323 = x278 + x319 + x320 + x321 + x322;
auto x324 = -x123*x224 - x226*x79 + V{0.219020467836257}*cell[13] - V{0.215979532163743}*cell[4];
auto x325 = x288 + x289 + x290 + x291 + x324;
auto x326 = x200 + x270 + x271 + x272 + x273 + x310 + x319 + x320 + x321 + x322;
auto x327 = x264 + x265 + x266 + x267 + x324;
auto x0 = x100*x23 + x103*x23 + x105*x23 + x106*x109 + x106*x112 + x106*x114 - x106*x125 - x106*x126 - x106*x127 - x121*x23 - x123*x23 - x124*x23 - V{0.376315789473684}*x132*(x128 + x129 + x130) + x23*x74 + x23*x79 + x23*x85 + x23*x90 + x23*x95 + x23*x97 - x72*(V{0.41578947368421}*cell[0] + V{0.41578947368421}*cell[10] + V{0.41578947368421}*cell[11] + V{0.41578947368421}*cell[12] + V{0.41578947368421}*cell[13] + V{0.41578947368421}*cell[14] + V{0.41578947368421}*cell[15] + V{0.41578947368421}*cell[16] + V{0.41578947368421}*cell[17] + V{0.41578947368421}*cell[18] + V{0.41578947368421}*cell[1] + V{0.41578947368421}*cell[2] + V{0.41578947368421}*cell[3] + V{0.41578947368421}*cell[4] + V{0.41578947368421}*cell[5] + V{0.41578947368421}*cell[6] + V{0.41578947368421}*cell[7] + V{0.41578947368421}*cell[8] + V{0.41578947368421}*cell[9] + V{0.41578947368421}) - V{0.247368421052631}*cell[0] + V{0.102631578947368}*cell[10] + V{0.102631578947368}*cell[11] + V{0.102631578947368}*cell[12] + V{0.0526315789473684}*cell[13] + V{0.0526315789473684}*cell[14] + V{0.0526315789473684}*cell[15] + V{0.0526315789473684}*cell[16] + V{0.0526315789473684}*cell[17] + V{0.0526315789473684}*cell[18] + V{0.102631578947368}*cell[1] + V{0.102631578947368}*cell[2] + V{0.102631578947368}*cell[3] + V{0.0526315789473684}*cell[4] + V{0.0526315789473684}*cell[5] + V{0.0526315789473684}*cell[6] + V{0.0526315789473684}*cell[7] + V{0.0526315789473684}*cell[8] + V{0.0526315789473684}*cell[9] + V{-0.364035087719298};
auto x1 = -x114*x136 - x127*x133 - x135 + x146 + x151 + x152 + x153 + x187 + V{0.0198538011695907}*cell[10] + V{0.0598538011695906}*cell[1] + V{0.00652046783625724};
auto x2 = -x109*x189 - x125*x188 + x146 - x190 + x191 + x197 + x198 + x205 + V{0.0198538011695907}*cell[11] + V{0.0598538011695907}*cell[2] + V{0.00652046783625724};
auto x3 = -x112*x189 - x126*x188 + x151 + x197 - x206 + x207 + x208 + x210 + V{0.0198538011695907}*cell[12] + V{0.0598538011695907}*cell[3];
auto x4 = -x103*x211 - x123*x216 - x212*x90 - x213*x79 - x215 + x228 + x229 + x231 + x237 + x249 + V{0.439853801169591}*cell[13] - V{0.115146198830409}*cell[14] + V{0.329853801169591}*cell[4] - V{0.115146198830409}*cell[5];
auto x5 = -x103*x213 + x123*x212 - x211*x79 + x216*x90 + x227 - x251 + x256 + x257 + x259 + x261 - V{0.115146198830409}*cell[13] + V{0.439853801169591}*cell[14] - V{0.115146198830409}*cell[4] + V{0.329853801169591}*cell[5];
auto x6 = -x100*x212 - x105*x211 - x124*x216 - x213*x95 + x237 + x257 - x263 + x269 + x280 + x284 + V{0.439853801169591}*cell[15] - V{0.115146198830409}*cell[16] + V{0.329853801169591}*cell[6] - V{0.115146198830409}*cell[7];
auto x7 = x100*x216 - x105*x213 + x124*x212 - x211*x95 + x231 + x259 + x280 - x287 + x292 + x294 - V{0.115146198830409}*cell[15] + V{0.439853801169591}*cell[16] - V{0.115146198830409}*cell[6] + V{0.329853801169591}*cell[7];
auto x8 = -x121*x216 - x213*x74 + x228 + x269 - x296 + x297 + x298 + x307 + V{0.439853801169591}*cell[17] + V{0.329853801169591}*cell[8];
auto x9 = -x213*x85 + x216*x97 + x229 + x292 - x309 + x310 + x312 + x314 + V{0.439853801169591}*cell[18] + V{0.329853801169591}*cell[9];
auto x10 = x114*x133 + x127*x136 + x135 + x187 + x191 + x207 + x315 + x316 + V{0.0598538011695906}*cell[10] + V{0.0198538011695907}*cell[1] + V{0.00652046783625723};
auto x11 = x109*x188 + x125*x189 + x152 + x190 + x205 + x208 + x315 + x317 + V{0.0598538011695907}*cell[11] + V{0.0198538011695907}*cell[2] + V{0.00652046783625723};
auto x12 = x112*x188 + x126*x189 + x153 + x198 + x206 + x210 + x316 + x317 + V{0.0598538011695907}*cell[12] + V{0.0198538011695907}*cell[3];
auto x13 = -x103*x212 + x123*x213 - x211*x90 + x215 + x216*x79 + x249 + x257 + x258 + x311 + x318 + x323 + V{0.329853801169591}*cell[13] - V{0.115146198830409}*cell[14] + V{0.439853801169591}*cell[4] - V{0.115146198830409}*cell[5];
auto x14 = x103*x216 + x123*x211 - x212*x79 - x213*x90 + x231 + x236 + x251 + x261 + x297 + x312 + x323 - V{0.115146198830409}*cell[13] + V{0.329853801169591}*cell[14] - V{0.115146198830409}*cell[4] + V{0.439853801169591}*cell[5];
auto x15 = -x100*x211 - x105*x212 + x124*x213 + x216*x95 + x231 + x258 + x263 + x284 + x325 + x326 + V{0.329853801169591}*cell[15] - V{0.115146198830409}*cell[16] + V{0.439853801169591}*cell[6] - V{0.115146198830409}*cell[7];
auto x16 = -x100*x213 + x105*x216 + x124*x211 - x212*x95 + x236 + x257 + x287 + x294 + x326 + x327 - V{0.115146198830409}*cell[15] + V{0.329853801169591}*cell[16] - V{0.115146198830409}*cell[6] + V{0.439853801169591}*cell[7];
auto x17 = x121*x213 + x216*x74 + x256 + x279 + x296 + x307 + x311 + x325 + V{0.329853801169591}*cell[17] + V{0.439853801169591}*cell[8];
auto x18 = -x213*x97 + x216*x85 + x227 + x274 + x275 + x276 + x277 + x309 + x314 + x318 + x327 + V{0.329853801169591}*cell[18] + V{0.439853801169591}*cell[9];
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
cell[9] = x9;
cell[10] = x10;
cell[11] = x11;
cell[12] = x12;
cell[13] = x13;
cell[14] = x14;
cell[15] = x15;
cell[16] = x16;
cell[17] = x17;
cell[18] = x18;
return { x28, V{1}*x37*(x57 + x64 + x69) };
}

};


}

}

#endif

#endif
