# OpenLB Automatic Code Generation

Common subexpression elimination (CSE) is an established approach to reducing
the arithmetic complexity of computation kernels in LBM. OpenLB currently provides
CSE-optimized versions of common LBM library functions [1] as well as various
collision operators [2].

These CSE-optimized partial template specializations are generated automatically
using the `cse.py` utility implemented in the present folder. It is applied to
all changed `*.cse.template` files when calling `make cse` from the OpenLB root.

This functionality is possible by combining a lightweight wrapper around the
CSE algorithm provided by the SymPy CAS [3] and dynamic Python C++ bindings
generated by cppyy [4].

All usage of CSE-optimized functions can be disabled by declaring

> #define DISABLE_CSE

prior to including the OpenLB header files.

## Basic usage

1. Install all dependencies (SymPy, cppyy, Mako)
   See `codegen/environment.yml` for a full listing including tested versions.
2. Modify / extend the desired template (e.g. `src/dynamics/collisionLES.cse.template` for LES collisions)
3. Call `make cse` (this takes quite a while depending on the operator, parallel make recommended)

## Basic usage (Nix Flake)

1. Instantiate the environment using `nix build .#env-generate-code --option sandbox false` (once)
2. Generate the code for all changed templates using `nix run .#generate-code`

[1]: `src/dynamics/lbm.h` resp. `src/dynamics/lbm.cse.h`
[2]: e.g. `src/dynamics/collision.h` resp. `src/dynamics/collision.cse.h`
[3]: https://www.sympy.org
[4]: https://cppyy.readthedocs.io/en/latest/
